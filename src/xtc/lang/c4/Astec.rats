/*
 * xtc - The eXTensible Compiler
 * Copyright (C) 2005-2006 Princeton University
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
 * USA.
 */

/**
 * Astec grammar. (C + Aspect)
 *
 * @author Marco Yuen
 */
module xtc.lang.C4.Astec;

instantiate xtc.lang.CConstant(xtc.lang.C4.C4Spacing);
instantiate xtc.lang.CIdentifier(xtc.lang.C4.C4Reserved, xtc.lang.C4.C4Spacing);
instantiate xtc.util.Symbol(xtc.lang.C4.C4Spacing);
instantiate xtc.lang.CSymbol(xtc.util.Symbol);
instantiate xtc.lang.C4.C4Spacing(xtc.lang.C4.C4State, xtc.lang.CConstant);
instantiate xtc.lang.CContext(xtc.lang.C4.C4State);
instantiate xtc.lang.C4.AstecSymbol(xtc.lang.CSymbol);

modify xtc.lang.C4.C4Core(xtc.lang.CContext, xtc.util.Null, xtc.lang.CConstant,
                      xtc.lang.CIdentifier, xtc.lang.CSymbol,
		      xtc.lang.C4.C4Spacing);

body {
  static {
    if (ASTEC) reserve(new String[] { "import", "type" });
  }
}

option flag(ASTEC), reserved;

generic AstecMacros = 
    ImportMacro
  / TypeMacro
  / DefineMacro
  / AstecMacro
  ;

generic ImportMacro = 
    <header> void:"@":Symbol "import":Keyword
  ;

generic TypeMacro = 
    void:"@":Symbol "type":Identifier Identifier void:"(":Symbol Identifier* void:")":Symbol
      void:"=":Symbol DeclarationSpecifiers
  ;

transient generic DefineMacro = 
    void:"@":Symbol void:"define":Identifier Identifier
  ;

transient generic NameMacro = 
    void:"@":Symbol void:"name":Identifier Identifier
  ;

generic AstecMacro = 
    void:"@":Symbol void:"macro":Identifier DeclarationSpecifiers? SimpleDeclarator MacroDeclarator
    CompoundStatement
  / /* Empty For Now */
  ;

generic MacroDeclarator = 
    void:"(":Symbol void:")":Symbol
  ;

transient generic ImplicitArg = 
    ;

/* vim: set sts=2 sw=2 et : */
