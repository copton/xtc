// ===========================================================================
// This file has been generated by
// Rats! Parser Generator, Version 1.8.1, (C) 2004-2006 Robert Grimm
// on Saturday, June 10, 2006 at 3:48:28 PM.
// Edit at your own risk.
// ===========================================================================

package xtc.xform.samples.javaproperty;

import java.io.Reader;
import java.io.IOException;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

import xtc.util.Action;
import xtc.util.Pair;

import xtc.tree.Node;
import xtc.tree.GNode;

import xtc.parser.FullParserBase;
import xtc.parser.Column;
import xtc.parser.Result;
import xtc.parser.SemanticValue;
import xtc.parser.ParseError;

/**
 * Packrat parser for grammar <code>xtc.xform.samples.javaproperty.JavaProperty</code>.
 *
 * <p />This class has been generated by the <i>Rats!</i> parser
 * generator, version 1.8.1, (C) 2004-2006 Robert Grimm.
 */
public final class JavaPropertyParser extends FullParserBase {

  /** The JAVA_KEYWORDS set. */
  public static final Set JAVA_KEYWORDS = new HashSet();

  // =========================================================================

  /** Chunk 1 of memoized results. */
  static final class Chunk1 {
    Result fFormalParameters;
    Result fFormalParameters$$Star1;
    Result fDeclarators;
    Result fDeclarators$$Star1;
    Result fBlock;
    Result fBlock$$Star1;
    Result fParExpression;
    Result fCatchClause;
    Result fExpression;
    Result fConditionalExpression;
  }

  /** Chunk 2 of memoized results. */
  static final class Chunk2 {
    Result fLogicalOrExpression;
    Result fRelationalExpression;
    Result fVariableInitializer;
    Result fType;
    Result fTypeName;
    Result fBasicType;
    Result fDimensions;
    Result fDimensions$$Plus1;
    Result fQualifiedIdentifier;
    Result fQualifiedIdentifier$$Star1;
  }

  /** Chunk 3 of memoized results. */
  static final class Chunk3 {
    Result fIdentifier;
    Result fWord;
    Result fSymbol;
  }

  // =========================================================================

  /** Memoization table column. */
  static final class JavaPropertyParserColumn extends Column {
    Chunk1 chunk1;
    Chunk2 chunk2;
    Chunk3 chunk3;
  }

  // =========================================================================

  /**
   * Create a new packrat parser.
   *
   * @param reader The reader.
   * @param file The file name.
   */
  public JavaPropertyParser(final Reader reader, final String file) {
    super(reader, file);
  }

  /**
   * Create a new packrat parser.
   *
   * @param reader The file reader.
   * @param file The file name.
   * @param size The file size.
   */
  public JavaPropertyParser(final Reader reader, final String file, final int size) {
    super(reader, file, size);
  }

  // =========================================================================

  protected Column newColumn() {
    return new JavaPropertyParserColumn();
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.CompilationUnit.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pCompilationUnit(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyRepetition1;
    Pair       yyRepValue1;
    int        yyOption1;
    GNode      yyOpValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSpacing(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {

      yyOption1  = yyResult.index;
      yyOpValue1 = null;

      yyResult = pPackageDeclaration(yyOption1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$el$1 = (GNode)yyResult.semanticValue();

        yyOption1  = yyResult.index;
        yyOpValue1 = v$el$1;
      }
      { // Start scope for v$g$1.
        final GNode v$g$1 = yyOpValue1;

        yyRepetition1 = yyOption1;
        yyRepValue1   = Pair.EMPTY;
        while (true) {

          yyResult = pImportDeclaration(yyRepetition1);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            final GNode v$el$2 = (GNode)yyResult.semanticValue();

            yyRepetition1 = yyResult.index;
            yyRepValue1   = new Pair(v$el$2, yyRepValue1);
            continue;
          }
          break;
        }
        { // Start scope for v$g$2.
          final Pair v$g$2 = yyRepValue1.reverse();

          yyRepValue1   = Pair.EMPTY;
          while (true) {

            yyResult = pDeclaration(yyRepetition1);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              final GNode v$el$3 = (GNode)yyResult.semanticValue();

              yyRepetition1 = yyResult.index;
              yyRepValue1   = new Pair(v$el$3, yyRepValue1);
              continue;
            }
            break;
          }
          { // Start scope for v$g$3.
            final Pair v$g$3 = yyRepValue1.reverse();

            yyOption1  = yyRepetition1;

            yyC = character(yyOption1);
            if ('\u001a' == yyC) {
              yyIndex = yyOption1 + 1;

              yyOption1  = yyIndex;
            }

            yyResult = pEndOfFile(yyOption1);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {

              yyValue = GNode.create("CompilationUnit", ((Pair)v$g$2).size() + ((Pair)v$g$3).size() + 1).
                add(v$g$1).addAll((Pair)v$g$2).addAll((Pair)v$g$3);

              setLocation(yyValue, yyStart);
              return yyResult.createValue(yyValue, yyError);
            }
          } // End scope for v$g$3.
        } // End scope for v$g$2.
      } // End scope for v$g$1.
    }

    // Done.
    yyError = yyError.select("compilation unit expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.PackageDeclaration.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pPackageDeclaration(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("package")) {

      yyResult = pQualifiedIdentifier(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyBase   = yyResult.index;
        yyResult = pSymbol(yyBase);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue(";")) {

          yyValue = GNode.create("PackageDeclaration", v$g$1);

          setLocation(yyValue, yyStart);
          return yyResult.createValue(yyValue, yyError);
        } else {
          yyError = yyError.select("\";\" expected", yyBase);
        }
      }
    }

    // Done.
    yyError = yyError.select("package declaration expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.ImportDeclaration.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pImportDeclaration(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    int        yyOption1;
    String     yyOpValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("import")) {

      yyResult = pQualifiedIdentifier(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyOption1  = yyResult.index;
        yyOpValue1 = null;

        yyResult = pDotStarTail(yyOption1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final String v$el$1 = (String)yyResult.semanticValue();

          yyOption1  = yyResult.index;
          yyOpValue1 = v$el$1;
        }
        { // Start scope for v$g$2.
          final String v$g$2 = yyOpValue1;

          yyBase   = yyOption1;
          yyResult = pSymbol(yyBase);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue(";")) {

            yyValue = GNode.create("ImportDeclaration", v$g$1, v$g$2);

            setLocation(yyValue, yyStart);
            return yyResult.createValue(yyValue, yyError);
          } else {
            yyError = yyError.select("\";\" expected", yyBase);
          }
        } // End scope for v$g$2.
      }
    }

    // Done.
    yyError = yyError.select("import declaration expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.DotStarTail.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pDotStarTail(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue(".")) {

      yyBase   = yyResult.index;
      yyResult = pSymbol(yyBase);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue("*")) {
        yyValue = "*";

        return yyResult.createValue(yyValue, yyError);
      } else {
        yyError = yyError.select("\"*\" expected", yyBase);
      }
    }

    // Done.
    yyError = yyError.select("dot star tail expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.xform.samples.javaproperty.JavaProperty.Modifiers.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pModifiers(final int yyStart) throws IOException {
    Result     yyResult;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pModifierList(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final Pair v$g$1 = (Pair)yyResult.semanticValue();

      yyValue = GNode.create("Modifiers", (Pair)v$g$1);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.ModifierList.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pModifierList(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyRepetition1;
    Pair       yyRepValue1;
    Pair       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyRepetition1 = yyStart;
    yyRepValue1   = Pair.EMPTY;
    while (true) {

      yyResult = pModifier(yyRepetition1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final String v$el$2 = (String)yyResult.semanticValue();

        yyRepetition1 = yyResult.index;
        yyRepValue1   = new Pair(v$el$2, yyRepValue1);
        continue;
      }
      break;
    }
    { // Start scope for yyValue.
      yyValue = yyRepValue1.reverse();

      return new SemanticValue(yyValue, yyRepetition1, yyError);
    } // End scope for yyValue.
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.xform.samples.javaproperty.JavaProperty.Modifier.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pModifier(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Public>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("public")) {
      yyValue = "public";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Protected>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("protected")) {
      yyValue = "protected";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Private>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("private")) {
      yyValue = "private";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Static>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("static")) {
      yyValue = "static";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Abstract>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("abstract")) {
      yyValue = "abstract";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Final>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("final")) {
      yyValue = "final";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Native>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("native")) {
      yyValue = "native";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Synchronized>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("synchronized")) {
      yyValue = "synchronized";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Transient>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("transient")) {
      yyValue = "transient";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Volatile>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("volatile")) {
      yyValue = "volatile";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Strictfp>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("strictfp")) {
      yyValue = "strictfp";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Property>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("property")) {
      yyValue = "property";

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("modifier expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.FormalParameter.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pFormalParameter(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyOption1;
    GNode      yyOpValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyOption1  = yyStart;
    yyOpValue1 = null;

    yyResult = pFinalClause(yyOption1);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$el$1 = (GNode)yyResult.semanticValue();

      yyOption1  = yyResult.index;
      yyOpValue1 = v$el$1;
    }
    { // Start scope for v$g$1.
      final GNode v$g$1 = yyOpValue1;

      yyResult = pType(yyOption1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$2 = (GNode)yyResult.semanticValue();

        yyResult = pIdentifier(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final String v$g$3 = (String)yyResult.semanticValue();

          yyOption1  = yyResult.index;
          yyOpValue1 = null;

          yyResult = pDimensions(yyOption1);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            final GNode v$el$2 = (GNode)yyResult.semanticValue();

            yyOption1  = yyResult.index;
            yyOpValue1 = v$el$2;
          }
          { // Start scope for v$g$4.
            final GNode v$g$4 = yyOpValue1;

            yyValue = GNode.create("FormalParameter", v$g$1, v$g$2, v$g$3, v$g$4);

            setLocation(yyValue, yyStart);
            return new SemanticValue(yyValue, yyOption1, yyError);
          } // End scope for v$g$4.
        }
      }
    } // End scope for v$g$1.

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.FinalClause.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pFinalClause(final int yyStart) throws IOException {
    Result     yyResult;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("final")) {

      yyValue = GNode.create("FinalClause", false);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("final clause expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.FormalParameters.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pFormalParameters(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fFormalParameters) 
      yyColumn.chunk1.fFormalParameters = pFormalParameters$1(yyStart);
    return yyColumn.chunk1.fFormalParameters;
  }

  /** Actually parse xtc.xform.samples.javaproperty.JavaProperty.FormalParameters. */
  private Result pFormalParameters$1(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("(")) {

      final int yyChoice1 = yyResult.index;

      // Nested alternative 1.

      yyResult = pFormalParameter(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyResult = pFormalParameters$$Star1(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final Pair v$g$2 = (Pair)yyResult.semanticValue();

          yyBase   = yyResult.index;
          yyResult = pSymbol(yyBase);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue(")")) {

            yyValue = GNode.create("FormalParameters", v$g$1, (Pair)v$g$2);

            setLocation(yyValue, yyStart);
            return yyResult.createValue(yyValue, yyError);
          } else {
            yyError = yyError.select("\")\" expected", yyBase);
          }
        }
      }

      // Nested alternative 2.

      yyBase   = yyChoice1;
      yyResult = pSymbol(yyBase);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue(")")) {

        yyValue = GNode.create("FormalParameters", false);

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      } else {
        yyError = yyError.select("\")\" expected", yyBase);
      }
    }

    // Done.
    yyError = yyError.select("formal parameters expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.FormalParameters$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pFormalParameters$$Star1(final int yyStart) 
    throws IOException {

    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fFormalParameters$$Star1) 
      yyColumn.chunk1.fFormalParameters$$Star1 = pFormalParameters$$Star1$1(yyStart);
    return yyColumn.chunk1.fFormalParameters$$Star1;
  }

  /** Actually parse xtc.xform.samples.javaproperty.JavaProperty.FormalParameters$$Star1. */
  private Result pFormalParameters$$Star1$1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Pair       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue(",")) {

      yyResult = pFormalParameter(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$el$1 = (GNode)yyResult.semanticValue();

        yyResult = pFormalParameters$$Star1(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final Pair v$2 = (Pair)yyResult.semanticValue();

          yyValue = new Pair(v$el$1, v$2);

          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Alternative 2.

    yyValue = Pair.EMPTY;

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.xform.samples.javaproperty.JavaProperty.Declarator.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pDeclarator(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    int        yyOption1;
    GNode      yyOpValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pIdentifier(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final String v$g$1 = (String)yyResult.semanticValue();

      yyOption1  = yyResult.index;
      yyOpValue1 = null;

      yyResult = pDimensions(yyOption1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$el$1 = (GNode)yyResult.semanticValue();

        yyOption1  = yyResult.index;
        yyOpValue1 = v$el$1;
      }
      { // Start scope for v$g$2.
        final GNode v$g$2 = yyOpValue1;

        yyOpValue1 = null;

        yyBase   = yyOption1;
        yyResult = pSymbol(yyBase);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue("=")) {

          yyResult = pVariableInitializer(yyResult.index);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            final GNode v$el$2 = (GNode)yyResult.semanticValue();

            yyOption1  = yyResult.index;
            yyOpValue1 = v$el$2;
          }
        } else {
          yyError = yyError.select("\"=\" expected", yyBase);
        }
        { // Start scope for v$g$3.
          final GNode v$g$3 = yyOpValue1;

          yyValue = GNode.create("Declarator", v$g$1, v$g$2, v$g$3);

          setLocation(yyValue, yyStart);
          return new SemanticValue(yyValue, yyOption1, yyError);
        } // End scope for v$g$3.
      } // End scope for v$g$2.
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.Declarators.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pDeclarators(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fDeclarators) 
      yyColumn.chunk1.fDeclarators = pDeclarators$1(yyStart);
    return yyColumn.chunk1.fDeclarators;
  }

  /** Actually parse xtc.xform.samples.javaproperty.JavaProperty.Declarators. */
  private Result pDeclarators$1(final int yyStart) throws IOException {
    Result     yyResult;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pDeclarator(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$g$1 = (GNode)yyResult.semanticValue();

      yyResult = pDeclarators$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final Pair v$g$2 = (Pair)yyResult.semanticValue();

        yyValue = GNode.create("Declarators", v$g$1, (Pair)v$g$2);

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.Declarators$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pDeclarators$$Star1(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fDeclarators$$Star1) 
      yyColumn.chunk1.fDeclarators$$Star1 = pDeclarators$$Star1$1(yyStart);
    return yyColumn.chunk1.fDeclarators$$Star1;
  }

  /** Actually parse xtc.xform.samples.javaproperty.JavaProperty.Declarators$$Star1. */
  private Result pDeclarators$$Star1$1(final int yyStart) throws IOException {
    Result     yyResult;
    Pair       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue(",")) {

      yyResult = pDeclarator(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$el$1 = (GNode)yyResult.semanticValue();

        yyResult = pDeclarators$$Star1(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final Pair v$2 = (Pair)yyResult.semanticValue();

          yyValue = new Pair(v$el$1, v$2);

          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Alternative 2.

    yyValue = Pair.EMPTY;

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.xform.samples.javaproperty.JavaProperty.ClassBody.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pClassBody(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    int        yyRepetition1;
    Pair       yyRepValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("{")) {

      yyRepetition1 = yyResult.index;
      yyRepValue1   = Pair.EMPTY;
      while (true) {

        yyResult = pDeclaration(yyRepetition1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final GNode v$el$1 = (GNode)yyResult.semanticValue();

          yyRepetition1 = yyResult.index;
          yyRepValue1   = new Pair(v$el$1, yyRepValue1);
          continue;
        }
        break;
      }
      { // Start scope for v$g$1.
        final Pair v$g$1 = yyRepValue1.reverse();

        yyBase   = yyRepetition1;
        yyResult = pSymbol(yyBase);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue("}")) {

          yyValue = GNode.create("ClassBody", (Pair)v$g$1);

          setLocation(yyValue, yyStart);
          return yyResult.createValue(yyValue, yyError);
        } else {
          yyError = yyError.select("\"}\" expected", yyBase);
        }
      } // End scope for v$g$1.
    }

    // Done.
    yyError = yyError.select("class body expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.Declaration.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pDeclaration(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    int        yyOption1;
    Object     yyOpValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pModifiers(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$g$1 = (GNode)yyResult.semanticValue();

      final int yyChoice1 = yyResult.index;

      // Nested alternative 1.

      yyResult = pType(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$2 = (GNode)yyResult.semanticValue();

        yyResult = pDeclarators(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final GNode v$g$3 = (GNode)yyResult.semanticValue();

          yyBase   = yyResult.index;
          yyResult = pSymbol(yyBase);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue(";")) {

            yyValue = GNode.create("FieldDeclaration", v$g$1, v$g$2, v$g$3);

            setLocation(yyValue, yyStart);
            return yyResult.createValue(yyValue, yyError);
          } else {
            yyError = yyError.select("\";\" expected", yyBase);
          }
        }
      }

      // Nested alternative 2.

      yyResult = pResultType(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$2 = (GNode)yyResult.semanticValue();

        yyResult = pIdentifier(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final String v$g$3 = (String)yyResult.semanticValue();

          yyResult = pFormalParameters(yyResult.index);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            final GNode v$g$4 = (GNode)yyResult.semanticValue();

            yyOption1  = yyResult.index;
            yyOpValue1 = null;

            yyResult = pDimensions(yyOption1);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              final GNode v$el$1 = (GNode)yyResult.semanticValue();

              yyOption1  = yyResult.index;
              yyOpValue1 = v$el$1;
            }
            { // Start scope for v$g$5.
              final GNode v$g$5 = (GNode)yyOpValue1;

              yyOpValue1 = null;

              yyResult = pThrowsClause(yyOption1);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                final GNode v$el$2 = (GNode)yyResult.semanticValue();

                yyOption1  = yyResult.index;
                yyOpValue1 = v$el$2;
              }
              { // Start scope for v$g$6.
                final GNode v$g$6 = (GNode)yyOpValue1;

                final int yyChoice2 = yyOption1;

                // Nested alternative 1.

                yyResult = pBlock(yyChoice2);
                yyError  = yyResult.select(yyError);
                if (yyResult.hasValue()) {
                  final GNode v$g$7 = (GNode)yyResult.semanticValue();

                  yyValue = GNode.create("MethodDeclaration", v$g$1, v$g$2, v$g$3, v$g$4, v$g$5, v$g$6, v$g$7);

                  setLocation(yyValue, yyStart);
                  return yyResult.createValue(yyValue, yyError);
                }

                // Nested alternative 2.

                yyResult = pNull(yyChoice2);
                yyError  = yyResult.select(yyError);
                if (yyResult.hasValue()) {
                  final Object v$g$8 = yyResult.semanticValue();

                  yyBase   = yyResult.index;
                  yyResult = pSymbol(yyBase);
                  yyError  = yyResult.select(yyError);
                  if (yyResult.hasValue(";")) {

                    yyValue = GNode.create("MethodDeclaration", v$g$1, v$g$2, v$g$3, v$g$4, v$g$5, v$g$6, v$g$8);

                    setLocation(yyValue, yyStart);
                    return yyResult.createValue(yyValue, yyError);
                  } else {
                    yyError = yyError.select("\";\" expected", yyBase);
                  }
                }
              } // End scope for v$g$6.
            } // End scope for v$g$5.
          }
        }
      }

      // Nested alternative 3.

      yyResult = pIdentifier(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final String v$g$2 = (String)yyResult.semanticValue();

        yyResult = pFormalParameters(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final GNode v$g$3 = (GNode)yyResult.semanticValue();

          yyOption1  = yyResult.index;
          yyOpValue1 = null;

          yyResult = pThrowsClause(yyOption1);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            final GNode v$el$1 = (GNode)yyResult.semanticValue();

            yyOption1  = yyResult.index;
            yyOpValue1 = v$el$1;
          }
          { // Start scope for v$g$4.
            final GNode v$g$4 = (GNode)yyOpValue1;

            yyResult = pBlock(yyOption1);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              final GNode v$g$5 = (GNode)yyResult.semanticValue();

              yyValue = GNode.create("ConstructorDeclaration", v$g$1, v$g$2, v$g$3, v$g$4, v$g$5);

              setLocation(yyValue, yyStart);
              return yyResult.createValue(yyValue, yyError);
            }
          } // End scope for v$g$4.
        }
      }

      // Nested alternative 4.

      yyBase   = yyChoice1;
      yyResult = pWord(yyBase);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue("class")) {

        yyResult = pIdentifier(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final String v$g$2 = (String)yyResult.semanticValue();

          yyOption1  = yyResult.index;
          yyOpValue1 = null;

          yyResult = pExtension(yyOption1);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            final GNode v$el$1 = (GNode)yyResult.semanticValue();

            yyOption1  = yyResult.index;
            yyOpValue1 = v$el$1;
          }
          { // Start scope for v$g$3.
            final GNode v$g$3 = (GNode)yyOpValue1;

            yyOpValue1 = null;

            yyResult = pImplementation(yyOption1);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              final GNode v$el$2 = (GNode)yyResult.semanticValue();

              yyOption1  = yyResult.index;
              yyOpValue1 = v$el$2;
            }
            { // Start scope for v$g$4.
              final GNode v$g$4 = (GNode)yyOpValue1;

              yyResult = pClassBody(yyOption1);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                final GNode v$g$5 = (GNode)yyResult.semanticValue();

                yyValue = GNode.create("ClassDeclaration", v$g$1, v$g$2, v$g$3, v$g$4, v$g$5);

                setLocation(yyValue, yyStart);
                return yyResult.createValue(yyValue, yyError);
              }
            } // End scope for v$g$4.
          } // End scope for v$g$3.
        }
      } else {
        yyError = yyError.select("\"class\" expected", yyBase);
      }

      // Nested alternative 5.

      yyBase   = yyChoice1;
      yyResult = pWord(yyBase);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue("interface")) {

        yyResult = pIdentifier(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final String v$g$2 = (String)yyResult.semanticValue();

          yyOption1  = yyResult.index;
          yyOpValue1 = null;

          yyResult = pExtension(yyOption1);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            final GNode v$el$1 = (GNode)yyResult.semanticValue();

            yyOption1  = yyResult.index;
            yyOpValue1 = v$el$1;
          }
          { // Start scope for v$g$3.
            final GNode v$g$3 = (GNode)yyOpValue1;

            yyResult = pClassBody(yyOption1);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              final GNode v$g$4 = (GNode)yyResult.semanticValue();

              yyValue = GNode.create("InterfaceDeclaration", v$g$1, v$g$2, v$g$3, v$g$4);

              setLocation(yyValue, yyStart);
              return yyResult.createValue(yyValue, yyError);
            }
          } // End scope for v$g$3.
        }
      } else {
        yyError = yyError.select("\"interface\" expected", yyBase);
      }
    }

    // Alternative 2.

    yyOption1  = yyStart;
    yyOpValue1 = null;

    yyBase   = yyOption1;
    yyResult = pWord(yyBase);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("static")) {
      final String v$el$1 = "static";

      yyOption1  = yyResult.index;
      yyOpValue1 = v$el$1;
    } else {
      yyError = yyError.select("\"static\" expected", yyBase);
    }
    { // Start scope for v$g$1.
      final String v$g$1 = (String)yyOpValue1;

      yyResult = pBlock(yyOption1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$2 = (GNode)yyResult.semanticValue();

        yyValue = GNode.create("BlockDeclaration", v$g$1, v$g$2);

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      }
    } // End scope for v$g$1.

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.ThrowsClause.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pThrowsClause(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    int        yyRepetition1;
    Pair       yyRepValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("throws")) {

      yyResult = pQualifiedIdentifier(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyRepetition1 = yyResult.index;
        yyRepValue1   = Pair.EMPTY;
        while (true) {

          yyBase   = yyRepetition1;
          yyResult = pSymbol(yyBase);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue(",")) {

            yyResult = pQualifiedIdentifier(yyResult.index);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              final GNode v$el$1 = (GNode)yyResult.semanticValue();

              yyRepetition1 = yyResult.index;
              yyRepValue1   = new Pair(v$el$1, yyRepValue1);
              continue;
            }
          } else {
            yyError = yyError.select("\",\" expected", yyBase);
          }
          break;
        }
        { // Start scope for v$g$2.
          final Pair v$g$2 = yyRepValue1.reverse();

          yyValue = GNode.create("ThrowsClause", v$g$1, (Pair)v$g$2);

          setLocation(yyValue, yyStart);
          return new SemanticValue(yyValue, yyRepetition1, yyError);
        } // End scope for v$g$2.
      }
    }

    // Done.
    yyError = yyError.select("throws clause expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.xform.samples.javaproperty.JavaProperty.Extension.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pExtension(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    int        yyRepetition1;
    Pair       yyRepValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("extends")) {

      yyResult = pType(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyRepetition1 = yyResult.index;
        yyRepValue1   = Pair.EMPTY;
        while (true) {

          yyBase   = yyRepetition1;
          yyResult = pSymbol(yyBase);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue(",")) {

            yyResult = pType(yyResult.index);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              final GNode v$el$1 = (GNode)yyResult.semanticValue();

              yyRepetition1 = yyResult.index;
              yyRepValue1   = new Pair(v$el$1, yyRepValue1);
              continue;
            }
          } else {
            yyError = yyError.select("\",\" expected", yyBase);
          }
          break;
        }
        { // Start scope for v$g$2.
          final Pair v$g$2 = yyRepValue1.reverse();

          yyValue = GNode.create("Extension", v$g$1, (Pair)v$g$2);

          setLocation(yyValue, yyStart);
          return new SemanticValue(yyValue, yyRepetition1, yyError);
        } // End scope for v$g$2.
      }
    }

    // Done.
    yyError = yyError.select("extension expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.Implementation.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pImplementation(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    int        yyRepetition1;
    Pair       yyRepValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("implements")) {

      yyResult = pType(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyRepetition1 = yyResult.index;
        yyRepValue1   = Pair.EMPTY;
        while (true) {

          yyBase   = yyRepetition1;
          yyResult = pSymbol(yyBase);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue(",")) {

            yyResult = pType(yyResult.index);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              final GNode v$el$1 = (GNode)yyResult.semanticValue();

              yyRepetition1 = yyResult.index;
              yyRepValue1   = new Pair(v$el$1, yyRepValue1);
              continue;
            }
          } else {
            yyError = yyError.select("\",\" expected", yyBase);
          }
          break;
        }
        { // Start scope for v$g$2.
          final Pair v$g$2 = yyRepValue1.reverse();

          yyValue = GNode.create("Implementation", v$g$1, (Pair)v$g$2);

          setLocation(yyValue, yyStart);
          return new SemanticValue(yyValue, yyRepetition1, yyError);
        } // End scope for v$g$2.
      }
    }

    // Done.
    yyError = yyError.select("implementation expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.xform.samples.javaproperty.JavaProperty.Block.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pBlock(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fBlock) 
      yyColumn.chunk1.fBlock = pBlock$1(yyStart);
    return yyColumn.chunk1.fBlock;
  }

  /** Actually parse xtc.xform.samples.javaproperty.JavaProperty.Block. */
  private Result pBlock$1(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Block>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("{")) {

      yyResult = pBlock$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final Pair v$g$1 = (Pair)yyResult.semanticValue();

        yyBase   = yyResult.index;
        yyResult = pSymbol(yyBase);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue("}")) {

          yyValue = GNode.create("Block", (Pair)v$g$1);

          setLocation(yyValue, yyStart);
          return yyResult.createValue(yyValue, yyError);
        } else {
          yyError = yyError.select("\"}\" expected", yyBase);
        }
      }
    }

    // Done.
    yyError = yyError.select("block expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.Block$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pBlock$$Star1(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fBlock$$Star1) 
      yyColumn.chunk1.fBlock$$Star1 = pBlock$$Star1$1(yyStart);
    return yyColumn.chunk1.fBlock$$Star1;
  }

  /** Actually parse xtc.xform.samples.javaproperty.JavaProperty.Block$$Star1. */
  private Result pBlock$$Star1$1(final int yyStart) throws IOException {
    Result     yyResult;
    Pair       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pDeclarationOrStatement(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$1 = (GNode)yyResult.semanticValue();

      yyResult = pBlock$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final Pair v$2 = (Pair)yyResult.semanticValue();

        yyValue = new Pair(v$1, v$2);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyValue = Pair.EMPTY;

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.DeclarationOrStatement.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pDeclarationOrStatement(final int yyStart) 
    throws IOException {

    Result     yyResult;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Declaration>.

    yyResult = pDeclaration(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Statement>.

    yyResult = pStatement(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.xform.samples.javaproperty.JavaProperty.Statement.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pStatement(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    int        yyRepetition1;
    boolean    yyRepeated1;
    Pair       yyRepValue1;
    int        yyOption1;
    Object     yyOpValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Block>.

    yyResult = pBlock(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 2.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("if")) {

      yyResult = pParExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyResult = pStatement(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final GNode v$g$2 = (GNode)yyResult.semanticValue();

          final int yyChoice1 = yyResult.index;

          // Nested alternative 1.

          yyBase   = yyChoice1;
          yyResult = pWord(yyBase);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue("else")) {

            yyResult = pStatement(yyResult.index);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              final GNode v$g$3 = (GNode)yyResult.semanticValue();

              yyValue = GNode.create("IfElseStatement", v$g$1, v$g$2, v$g$3);

              setLocation(yyValue, yyStart);
              return yyResult.createValue(yyValue, yyError);
            }
          } else {
            yyError = yyError.select("\"else\" expected", yyBase);
          }

          // Nested alternative 2.

          yyValue = GNode.create("IfStatement", v$g$1, v$g$2);

          setLocation(yyValue, yyStart);
          return new SemanticValue(yyValue, yyChoice1, yyError);
        }
      }
    }

    // Alternative 3.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("for")) {

      yyBase   = yyResult.index;
      yyResult = pSymbol(yyBase);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue("(")) {

        yyResult = pForInit(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final GNode v$g$1 = (GNode)yyResult.semanticValue();

          yyOption1  = yyResult.index;
          yyOpValue1 = null;

          yyResult = pExpression(yyOption1);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            final GNode v$el$1 = (GNode)yyResult.semanticValue();

            yyOption1  = yyResult.index;
            yyOpValue1 = v$el$1;
          }
          { // Start scope for v$g$2.
            final GNode v$g$2 = (GNode)yyOpValue1;

            yyBase   = yyOption1;
            yyResult = pSymbol(yyBase);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue(";")) {

              yyOption1  = yyResult.index;
              yyOpValue1 = null;

              yyResult = pExpressionList(yyOption1);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                final GNode v$el$2 = (GNode)yyResult.semanticValue();

                yyOption1  = yyResult.index;
                yyOpValue1 = v$el$2;
              }
              { // Start scope for v$g$3.
                final GNode v$g$3 = (GNode)yyOpValue1;

                yyBase   = yyOption1;
                yyResult = pSymbol(yyBase);
                yyError  = yyResult.select(yyError);
                if (yyResult.hasValue(")")) {

                  yyResult = pStatement(yyResult.index);
                  yyError  = yyResult.select(yyError);
                  if (yyResult.hasValue()) {
                    final GNode v$g$4 = (GNode)yyResult.semanticValue();

                    yyValue = GNode.create("ForStatement", v$g$1, v$g$2, v$g$3, v$g$4);

                    setLocation(yyValue, yyStart);
                    return yyResult.createValue(yyValue, yyError);
                  }
                } else {
                  yyError = yyError.select("\")\" expected", yyBase);
                }
              } // End scope for v$g$3.
            } else {
              yyError = yyError.select("\";\" expected", yyBase);
            }
          } // End scope for v$g$2.
        }
      } else {
        yyError = yyError.select("\"(\" expected", yyBase);
      }
    }

    // Alternative 4.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("while")) {

      yyResult = pParExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyResult = pStatement(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final GNode v$g$2 = (GNode)yyResult.semanticValue();

          yyValue = GNode.create("WhileStatement", v$g$1, v$g$2);

          setLocation(yyValue, yyStart);
          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Alternative 5.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("do")) {

      yyResult = pStatement(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyBase   = yyResult.index;
        yyResult = pWord(yyBase);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue("while")) {

          yyResult = pParExpression(yyResult.index);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            final GNode v$g$2 = (GNode)yyResult.semanticValue();

            yyBase   = yyResult.index;
            yyResult = pSymbol(yyBase);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue(";")) {

              yyValue = GNode.create("DoWhileStatement", v$g$1, v$g$2);

              setLocation(yyValue, yyStart);
              return yyResult.createValue(yyValue, yyError);
            } else {
              yyError = yyError.select("\";\" expected", yyBase);
            }
          }
        } else {
          yyError = yyError.select("\"while\" expected", yyBase);
        }
      }
    }

    // Alternative 6.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("try")) {

      yyResult = pBlock(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        final int yyChoice1 = yyResult.index;

        // Nested alternative 1.

        yyRepetition1 = yyChoice1;
        yyRepValue1   = Pair.EMPTY;
        while (true) {

          yyResult = pCatchClause(yyRepetition1);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            final GNode v$el$1 = (GNode)yyResult.semanticValue();

            yyRepetition1 = yyResult.index;
            yyRepValue1   = new Pair(v$el$1, yyRepValue1);
            continue;
          }
          break;
        }
        { // Start scope for v$g$2.
          final Pair v$g$2 = yyRepValue1.reverse();

          yyBase   = yyRepetition1;
          yyResult = pWord(yyBase);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue("finally")) {

            yyResult = pBlock(yyResult.index);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              final GNode v$g$3 = (GNode)yyResult.semanticValue();

              yyValue = GNode.create("TryCatchFinallyStatement", ((Pair)v$g$2).size() + 2).
                add(v$g$1).addAll((Pair)v$g$2).add(v$g$3);

              setLocation(yyValue, yyStart);
              return yyResult.createValue(yyValue, yyError);
            }
          } else {
            yyError = yyError.select("\"finally\" expected", yyBase);
          }
        } // End scope for v$g$2.

        // Nested alternative 2.

        yyRepetition1 = yyChoice1;
        yyRepeated1   = false;
        yyRepValue1   = Pair.EMPTY;
        while (true) {

          yyResult = pCatchClause(yyRepetition1);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            final GNode v$el$1 = (GNode)yyResult.semanticValue();

            yyRepetition1 = yyResult.index;
            yyRepeated1   = true;
            yyRepValue1   = new Pair(v$el$1, yyRepValue1);
            continue;
          }
          break;
        }

        if (yyRepeated1) {
          final Pair v$g$2 = yyRepValue1.reverse();

          yyValue = GNode.create("TryCatchStatement", v$g$1, (Pair)v$g$2);

          setLocation(yyValue, yyStart);
          return new SemanticValue(yyValue, yyRepetition1, yyError);
        }
      }
    }

    // Alternative 7.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("switch")) {

      yyResult = pParExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyBase   = yyResult.index;
        yyResult = pSymbol(yyBase);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue("{")) {

          yyRepetition1 = yyResult.index;
          yyRepValue1   = Pair.EMPTY;
          while (true) {

            yyResult = pSwitchClause(yyRepetition1);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              final GNode v$el$1 = (GNode)yyResult.semanticValue();

              yyRepetition1 = yyResult.index;
              yyRepValue1   = new Pair(v$el$1, yyRepValue1);
              continue;
            }
            break;
          }
          { // Start scope for v$g$2.
            final Pair v$g$2 = yyRepValue1.reverse();

            yyBase   = yyRepetition1;
            yyResult = pSymbol(yyBase);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue("}")) {

              yyValue = GNode.create("SwitchStatement", v$g$1, (Pair)v$g$2);

              setLocation(yyValue, yyStart);
              return yyResult.createValue(yyValue, yyError);
            } else {
              yyError = yyError.select("\"}\" expected", yyBase);
            }
          } // End scope for v$g$2.
        } else {
          yyError = yyError.select("\"{\" expected", yyBase);
        }
      }
    }

    // Alternative 8.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("synchronized")) {

      yyResult = pParExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyResult = pBlock(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final GNode v$g$2 = (GNode)yyResult.semanticValue();

          yyValue = GNode.create("SynchronizedStatement", v$g$1, v$g$2);

          setLocation(yyValue, yyStart);
          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Alternative 9.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("return")) {

      yyOption1  = yyResult.index;
      yyOpValue1 = null;

      yyResult = pExpression(yyOption1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$el$1 = (GNode)yyResult.semanticValue();

        yyOption1  = yyResult.index;
        yyOpValue1 = v$el$1;
      }
      { // Start scope for v$g$1.
        final GNode v$g$1 = (GNode)yyOpValue1;

        yyBase   = yyOption1;
        yyResult = pSymbol(yyBase);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue(";")) {

          yyValue = GNode.create("ReturnStatement", v$g$1);

          setLocation(yyValue, yyStart);
          return yyResult.createValue(yyValue, yyError);
        } else {
          yyError = yyError.select("\";\" expected", yyBase);
        }
      } // End scope for v$g$1.
    }

    // Alternative 10.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("throw")) {

      yyResult = pExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyBase   = yyResult.index;
        yyResult = pSymbol(yyBase);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue(";")) {

          yyValue = GNode.create("ThrowStatement", v$g$1);

          setLocation(yyValue, yyStart);
          return yyResult.createValue(yyValue, yyError);
        } else {
          yyError = yyError.select("\";\" expected", yyBase);
        }
      }
    }

    // Alternative 11.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("break")) {

      yyOption1  = yyResult.index;
      yyOpValue1 = null;

      yyResult = pIdentifier(yyOption1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final String v$el$1 = (String)yyResult.semanticValue();

        yyOption1  = yyResult.index;
        yyOpValue1 = v$el$1;
      }
      { // Start scope for v$g$1.
        final String v$g$1 = (String)yyOpValue1;

        yyBase   = yyOption1;
        yyResult = pSymbol(yyBase);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue(";")) {

          yyValue = GNode.create("BreakStatement", v$g$1);

          setLocation(yyValue, yyStart);
          return yyResult.createValue(yyValue, yyError);
        } else {
          yyError = yyError.select("\";\" expected", yyBase);
        }
      } // End scope for v$g$1.
    }

    // Alternative 12.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("continue")) {

      yyOption1  = yyResult.index;
      yyOpValue1 = null;

      yyResult = pIdentifier(yyOption1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final String v$el$1 = (String)yyResult.semanticValue();

        yyOption1  = yyResult.index;
        yyOpValue1 = v$el$1;
      }
      { // Start scope for v$g$1.
        final String v$g$1 = (String)yyOpValue1;

        yyBase   = yyOption1;
        yyResult = pSymbol(yyBase);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue(";")) {

          yyValue = GNode.create("ContinueStatement", v$g$1);

          setLocation(yyValue, yyStart);
          return yyResult.createValue(yyValue, yyError);
        } else {
          yyError = yyError.select("\";\" expected", yyBase);
        }
      } // End scope for v$g$1.
    }

    // Alternative 13.

    yyResult = pIdentifier(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final String v$g$1 = (String)yyResult.semanticValue();

      yyBase   = yyResult.index;
      yyResult = pSymbol(yyBase);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue(":")) {

        yyResult = pStatement(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final GNode v$g$2 = (GNode)yyResult.semanticValue();

          yyValue = GNode.create("LabeledStatement", v$g$1, v$g$2);

          setLocation(yyValue, yyStart);
          return yyResult.createValue(yyValue, yyError);
        }
      } else {
        yyError = yyError.select("\":\" expected", yyBase);
      }
    }

    // Alternative 14.

    yyResult = pExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$g$1 = (GNode)yyResult.semanticValue();

      yyBase   = yyResult.index;
      yyResult = pSymbol(yyBase);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue(";")) {

        yyValue = GNode.create("ExpressionStatement", v$g$1);

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      } else {
        yyError = yyError.select("\";\" expected", yyBase);
      }
    }

    // Alternative 15.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue(";")) {

      yyValue = GNode.create("EmptyStatement", false);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("statement expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.xform.samples.javaproperty.JavaProperty.ForInit.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pForInit(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    int        yyOption1;
    GNode      yyOpValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyOption1  = yyStart;
    yyOpValue1 = null;

    yyResult = pFinalClause(yyOption1);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$el$1 = (GNode)yyResult.semanticValue();

      yyOption1  = yyResult.index;
      yyOpValue1 = v$el$1;
    }
    { // Start scope for v$g$1.
      final GNode v$g$1 = yyOpValue1;

      yyResult = pType(yyOption1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$2 = (GNode)yyResult.semanticValue();

        yyResult = pDeclarators(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final GNode v$g$3 = (GNode)yyResult.semanticValue();

          yyBase   = yyResult.index;
          yyResult = pSymbol(yyBase);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue(";")) {

            yyValue = GNode.create("ForInit", v$g$1, v$g$2, v$g$3);

            setLocation(yyValue, yyStart);
            return yyResult.createValue(yyValue, yyError);
          } else {
            yyError = yyError.select("\";\" expected", yyBase);
          }
        }
      }
    } // End scope for v$g$1.

    // Alternative 2.

    yyResult = pExpressionList(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$g$4 = (GNode)yyResult.semanticValue();

      yyBase   = yyResult.index;
      yyResult = pSymbol(yyBase);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue(";")) {

        yyValue = GNode.create("ForInit", v$g$4);

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      } else {
        yyError = yyError.select("\";\" expected", yyBase);
      }
    }

    // Alternative 3.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue(";")) {

      yyValue = GNode.create("ForInit", false);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("for init expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.ParExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pParExpression(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fParExpression) 
      yyColumn.chunk1.fParExpression = pParExpression$1(yyStart);
    return yyColumn.chunk1.fParExpression;
  }

  /** Actually parse xtc.xform.samples.javaproperty.JavaProperty.ParExpression. */
  private Result pParExpression$1(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("(")) {

      yyResult = pExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        yyValue = (GNode)yyResult.semanticValue();

        yyBase   = yyResult.index;
        yyResult = pSymbol(yyBase);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue(")")) {

          setLocation(yyValue, yyStart);
          return yyResult.createValue(yyValue, yyError);
        } else {
          yyError = yyError.select("\")\" expected", yyBase);
        }
      }
    }

    // Done.
    yyError = yyError.select("par expression expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.CatchClause.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pCatchClause(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fCatchClause) 
      yyColumn.chunk1.fCatchClause = pCatchClause$1(yyStart);
    return yyColumn.chunk1.fCatchClause;
  }

  /** Actually parse xtc.xform.samples.javaproperty.JavaProperty.CatchClause. */
  private Result pCatchClause$1(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("catch")) {

      yyBase   = yyResult.index;
      yyResult = pSymbol(yyBase);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue("(")) {

        yyResult = pFormalParameter(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final GNode v$g$1 = (GNode)yyResult.semanticValue();

          yyBase   = yyResult.index;
          yyResult = pSymbol(yyBase);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue(")")) {

            yyResult = pBlock(yyResult.index);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              final GNode v$g$2 = (GNode)yyResult.semanticValue();

              yyValue = GNode.create("CatchClause", v$g$1, v$g$2);

              setLocation(yyValue, yyStart);
              return yyResult.createValue(yyValue, yyError);
            }
          } else {
            yyError = yyError.select("\")\" expected", yyBase);
          }
        }
      } else {
        yyError = yyError.select("\"(\" expected", yyBase);
      }
    }

    // Done.
    yyError = yyError.select("catch clause expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.SwitchClause.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSwitchClause(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    int        yyRepetition1;
    Pair       yyRepValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("case")) {

      yyResult = pExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyBase   = yyResult.index;
        yyResult = pSymbol(yyBase);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue(":")) {

          yyRepetition1 = yyResult.index;
          yyRepValue1   = Pair.EMPTY;
          while (true) {

            yyResult = pDeclarationOrStatement(yyRepetition1);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              final GNode v$el$1 = (GNode)yyResult.semanticValue();

              yyRepetition1 = yyResult.index;
              yyRepValue1   = new Pair(v$el$1, yyRepValue1);
              continue;
            }
            break;
          }
          { // Start scope for v$g$2.
            final Pair v$g$2 = yyRepValue1.reverse();

            yyValue = GNode.create("CaseClause", v$g$1, (Pair)v$g$2);

            setLocation(yyValue, yyStart);
            return new SemanticValue(yyValue, yyRepetition1, yyError);
          } // End scope for v$g$2.
        } else {
          yyError = yyError.select("\":\" expected", yyBase);
        }
      }
    }

    // Alternative 2.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("default")) {

      yyBase   = yyResult.index;
      yyResult = pSymbol(yyBase);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue(":")) {

        yyRepetition1 = yyResult.index;
        yyRepValue1   = Pair.EMPTY;
        while (true) {

          yyResult = pDeclarationOrStatement(yyRepetition1);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            final GNode v$el$1 = (GNode)yyResult.semanticValue();

            yyRepetition1 = yyResult.index;
            yyRepValue1   = new Pair(v$el$1, yyRepValue1);
            continue;
          }
          break;
        }
        { // Start scope for v$g$1.
          final Pair v$g$1 = yyRepValue1.reverse();

          yyValue = GNode.create("DefaultClause", (Pair)v$g$1);

          setLocation(yyValue, yyStart);
          return new SemanticValue(yyValue, yyRepetition1, yyError);
        } // End scope for v$g$1.
      } else {
        yyError = yyError.select("\":\" expected", yyBase);
      }
    }

    // Done.
    yyError = yyError.select("switch clause expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.ExpressionList.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pExpressionList(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    int        yyRepetition1;
    Pair       yyRepValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$g$1 = (GNode)yyResult.semanticValue();

      yyRepetition1 = yyResult.index;
      yyRepValue1   = Pair.EMPTY;
      while (true) {

        yyBase   = yyRepetition1;
        yyResult = pSymbol(yyBase);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue(",")) {

          yyResult = pExpression(yyResult.index);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            final GNode v$el$1 = (GNode)yyResult.semanticValue();

            yyRepetition1 = yyResult.index;
            yyRepValue1   = new Pair(v$el$1, yyRepValue1);
            continue;
          }
        } else {
          yyError = yyError.select("\",\" expected", yyBase);
        }
        break;
      }
      { // Start scope for v$g$2.
        final Pair v$g$2 = yyRepValue1.reverse();

        yyValue = GNode.create("ExpressionList", v$g$1, (Pair)v$g$2);

        setLocation(yyValue, yyStart);
        return new SemanticValue(yyValue, yyRepetition1, yyError);
      } // End scope for v$g$2.
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.xform.samples.javaproperty.JavaProperty.Expression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pExpression(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fExpression) 
      yyColumn.chunk1.fExpression = pExpression$1(yyStart);
    return yyColumn.chunk1.fExpression;
  }

  /** Actually parse xtc.xform.samples.javaproperty.JavaProperty.Expression. */
  private Result pExpression$1(final int yyStart) throws IOException {
    Result     yyResult;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Assignment>.

    yyResult = pConditionalExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$g$1 = (GNode)yyResult.semanticValue();

      yyResult = pAssignmentOperator(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final String v$g$2 = (String)yyResult.semanticValue();

        yyResult = pExpression(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final GNode v$g$3 = (GNode)yyResult.semanticValue();

          yyValue = GNode.create("Expression", v$g$1, v$g$2, v$g$3);

          setLocation(yyValue, yyStart);
          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Alternative <Base>.

    yyResult = pConditionalExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.AssignmentOperator.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pAssignmentOperator(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Equal>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("=")) {
      yyValue = "=";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <PlusEqual>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("+=")) {
      yyValue = "+=";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <MinusEqual>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("-=")) {
      yyValue = "-=";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <StarEqual>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("*=")) {
      yyValue = "*=";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <SlashEqual>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("/=")) {
      yyValue = "/=";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <AmpersandEqual>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("&=")) {
      yyValue = "&=";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <BarEqual>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("|=")) {
      yyValue = "|=";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <CaretEqual>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("^=")) {
      yyValue = "^=";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <PercentEqual>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("%=")) {
      yyValue = "%=";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <DoubleLessEqual>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("<<=")) {
      yyValue = "<<=";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <DoubleGreaterEqual>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue(">>=")) {
      yyValue = ">>=";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <TripleGreaterEqual>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue(">>>=")) {
      yyValue = ">>>=";

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("assignment operator expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.ConditionalExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pConditionalExpression(final int yyStart) 
    throws IOException {

    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fConditionalExpression) 
      yyColumn.chunk1.fConditionalExpression = pConditionalExpression$1(yyStart);
    return yyColumn.chunk1.fConditionalExpression;
  }

  /** Actually parse xtc.xform.samples.javaproperty.JavaProperty.ConditionalExpression. */
  private Result pConditionalExpression$1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    int        yyBase;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Conditional>.

    yyResult = pLogicalOrExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$g$1 = (GNode)yyResult.semanticValue();

      yyBase   = yyResult.index;
      yyResult = pSymbol(yyBase);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue("?")) {

        yyResult = pExpression(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final GNode v$g$2 = (GNode)yyResult.semanticValue();

          yyBase   = yyResult.index;
          yyResult = pSymbol(yyBase);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue(":")) {

            yyResult = pConditionalExpression(yyResult.index);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              final GNode v$g$3 = (GNode)yyResult.semanticValue();

              yyValue = GNode.create("ConditionalExpression", v$g$1, v$g$2, v$g$3);

              setLocation(yyValue, yyStart);
              return yyResult.createValue(yyValue, yyError);
            }
          } else {
            yyError = yyError.select("\":\" expected", yyBase);
          }
        }
      } else {
        yyError = yyError.select("\"?\" expected", yyBase);
      }
    }

    // Alternative <Base>.

    yyResult = pLogicalOrExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.LogicalOrExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pLogicalOrExpression(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fLogicalOrExpression) 
      yyColumn.chunk2.fLogicalOrExpression = pLogicalOrExpression$1(yyStart);
    return yyColumn.chunk2.fLogicalOrExpression;
  }

  /** Actually parse xtc.xform.samples.javaproperty.JavaProperty.LogicalOrExpression. */
  private Result pLogicalOrExpression$1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    int        yyRepetition1;
    Pair       yyRepValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Base>.

    yyResult = pLogicalAndExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$3 = (GNode)yyResult.semanticValue();

      yyRepetition1 = yyResult.index;
      yyRepValue1   = Pair.EMPTY;
      while (true) {

        yyResult = pLogicalOrExpression$$Tail1(yyRepetition1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final Action v$4 = (Action)yyResult.semanticValue();

          yyRepetition1 = yyResult.index;
          yyRepValue1   = new Pair(v$4, yyRepValue1);
          continue;
        }
        break;
      }
      { // Start scope for v$5.
        final Pair v$5 = yyRepValue1.reverse();

        yyValue = (GNode)apply(v$5, v$3, yyStart);

        setLocation(yyValue, yyStart);
        return new SemanticValue(yyValue, yyRepetition1, yyError);
      } // End scope for v$5.
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.LogicalOrExpression$$Tail1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pLogicalOrExpression$$Tail1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Action     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Or>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("||")) {

      yyResult = pLogicalAndExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$2 = (GNode)yyResult.semanticValue();

        yyValue = new Action() {
            public Object run(Object v$1) {
              return GNode.create("LogicalOrExpression", v$1, v$g$2);
            }};
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    yyError = yyError.select("logical or expression expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.LogicalAndExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pLogicalAndExpression(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyRepetition1;
    Pair       yyRepValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Base>.

    yyResult = pBitwiseOrExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$3 = (GNode)yyResult.semanticValue();

      yyRepetition1 = yyResult.index;
      yyRepValue1   = Pair.EMPTY;
      while (true) {

        yyResult = pLogicalAndExpression$$Tail1(yyRepetition1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final Action v$4 = (Action)yyResult.semanticValue();

          yyRepetition1 = yyResult.index;
          yyRepValue1   = new Pair(v$4, yyRepValue1);
          continue;
        }
        break;
      }
      { // Start scope for v$5.
        final Pair v$5 = yyRepValue1.reverse();

        yyValue = (GNode)apply(v$5, v$3, yyStart);

        setLocation(yyValue, yyStart);
        return new SemanticValue(yyValue, yyRepetition1, yyError);
      } // End scope for v$5.
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.LogicalAndExpression$$Tail1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pLogicalAndExpression$$Tail1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Action     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <And>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("&&")) {

      yyResult = pBitwiseOrExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$2 = (GNode)yyResult.semanticValue();

        yyValue = new Action() {
            public Object run(Object v$1) {
              return GNode.create("LogicalAndExpression", v$1, v$g$2);
            }};
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    yyError = yyError.select("logical and expression expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.BitwiseOrExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pBitwiseOrExpression(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyRepetition1;
    Pair       yyRepValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Base>.

    yyResult = pBitwiseXorExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$3 = (GNode)yyResult.semanticValue();

      yyRepetition1 = yyResult.index;
      yyRepValue1   = Pair.EMPTY;
      while (true) {

        yyResult = pBitwiseOrExpression$$Tail1(yyRepetition1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final Action v$4 = (Action)yyResult.semanticValue();

          yyRepetition1 = yyResult.index;
          yyRepValue1   = new Pair(v$4, yyRepValue1);
          continue;
        }
        break;
      }
      { // Start scope for v$5.
        final Pair v$5 = yyRepValue1.reverse();

        yyValue = (GNode)apply(v$5, v$3, yyStart);

        setLocation(yyValue, yyStart);
        return new SemanticValue(yyValue, yyRepetition1, yyError);
      } // End scope for v$5.
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.BitwiseOrExpression$$Tail1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pBitwiseOrExpression$$Tail1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Action     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Or>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("|")) {

      yyResult = pBitwiseXorExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$2 = (GNode)yyResult.semanticValue();

        yyValue = new Action() {
            public Object run(Object v$1) {
              return GNode.create("BitwiseOrExpression", v$1, v$g$2);
            }};
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    yyError = yyError.select("bitwise or expression expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.BitwiseXorExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pBitwiseXorExpression(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyRepetition1;
    Pair       yyRepValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Base>.

    yyResult = pBitwiseAndExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$3 = (GNode)yyResult.semanticValue();

      yyRepetition1 = yyResult.index;
      yyRepValue1   = Pair.EMPTY;
      while (true) {

        yyResult = pBitwiseXorExpression$$Tail1(yyRepetition1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final Action v$4 = (Action)yyResult.semanticValue();

          yyRepetition1 = yyResult.index;
          yyRepValue1   = new Pair(v$4, yyRepValue1);
          continue;
        }
        break;
      }
      { // Start scope for v$5.
        final Pair v$5 = yyRepValue1.reverse();

        yyValue = (GNode)apply(v$5, v$3, yyStart);

        setLocation(yyValue, yyStart);
        return new SemanticValue(yyValue, yyRepetition1, yyError);
      } // End scope for v$5.
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.BitwiseXorExpression$$Tail1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pBitwiseXorExpression$$Tail1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Action     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Xor>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("^")) {

      yyResult = pBitwiseAndExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$2 = (GNode)yyResult.semanticValue();

        yyValue = new Action() {
            public Object run(Object v$1) {
              return GNode.create("BitwiseXorExpression", v$1, v$g$2);
            }};
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    yyError = yyError.select("bitwise xor expression expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.BitwiseAndExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pBitwiseAndExpression(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyRepetition1;
    Pair       yyRepValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Base>.

    yyResult = pEqualityExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$3 = (GNode)yyResult.semanticValue();

      yyRepetition1 = yyResult.index;
      yyRepValue1   = Pair.EMPTY;
      while (true) {

        yyResult = pBitwiseAndExpression$$Tail1(yyRepetition1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final Action v$4 = (Action)yyResult.semanticValue();

          yyRepetition1 = yyResult.index;
          yyRepValue1   = new Pair(v$4, yyRepValue1);
          continue;
        }
        break;
      }
      { // Start scope for v$5.
        final Pair v$5 = yyRepValue1.reverse();

        yyValue = (GNode)apply(v$5, v$3, yyStart);

        setLocation(yyValue, yyStart);
        return new SemanticValue(yyValue, yyRepetition1, yyError);
      } // End scope for v$5.
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.BitwiseAndExpression$$Tail1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pBitwiseAndExpression$$Tail1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Action     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <And>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("&")) {

      yyResult = pEqualityExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$2 = (GNode)yyResult.semanticValue();

        yyValue = new Action() {
            public Object run(Object v$1) {
              return GNode.create("BitwiseAndExpression", v$1, v$g$2);
            }};
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    yyError = yyError.select("bitwise and expression expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.EqualityExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pEqualityExpression(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyRepetition1;
    Pair       yyRepValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Base>.

    yyResult = pInstanceOfExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$4 = (GNode)yyResult.semanticValue();

      yyRepetition1 = yyResult.index;
      yyRepValue1   = Pair.EMPTY;
      while (true) {

        yyResult = pEqualityExpression$$Tail1(yyRepetition1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final Action v$5 = (Action)yyResult.semanticValue();

          yyRepetition1 = yyResult.index;
          yyRepValue1   = new Pair(v$5, yyRepValue1);
          continue;
        }
        break;
      }
      { // Start scope for v$6.
        final Pair v$6 = yyRepValue1.reverse();

        yyValue = (GNode)apply(v$6, v$4, yyStart);

        setLocation(yyValue, yyStart);
        return new SemanticValue(yyValue, yyRepetition1, yyError);
      } // End scope for v$6.
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.EqualityExpression$$Tail1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pEqualityExpression$$Tail1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Action     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Recursion>.

    yyResult = pEqualityOperator(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final String v$g$2 = (String)yyResult.semanticValue();

      yyResult = pInstanceOfExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$3 = (GNode)yyResult.semanticValue();

        yyValue = new Action() {
            public Object run(Object v$1) {
              return GNode.create("EqualityExpression", v$1, v$g$2, v$g$3);
            }};
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.EqualityOperator.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pEqualityOperator(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Equal>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("==")) {
      yyValue = "==";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <NotEqual>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("!=")) {
      yyValue = "!=";

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("equality operator expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.InstanceOfExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pInstanceOfExpression(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Instanceof>.

    yyResult = pRelationalExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$g$1 = (GNode)yyResult.semanticValue();

      yyBase   = yyResult.index;
      yyResult = pWord(yyBase);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue("instanceof")) {

        yyResult = pType(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final GNode v$g$2 = (GNode)yyResult.semanticValue();

          yyValue = GNode.create("InstanceOfExpression", v$g$1, v$g$2);

          setLocation(yyValue, yyStart);
          return yyResult.createValue(yyValue, yyError);
        }
      } else {
        yyError = yyError.select("\"instanceof\" expected", yyBase);
      }
    }

    // Alternative <Base>.

    yyResult = pRelationalExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.RelationalExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pRelationalExpression(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fRelationalExpression) 
      yyColumn.chunk2.fRelationalExpression = pRelationalExpression$1(yyStart);
    return yyColumn.chunk2.fRelationalExpression;
  }

  /** Actually parse xtc.xform.samples.javaproperty.JavaProperty.RelationalExpression. */
  private Result pRelationalExpression$1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    int        yyRepetition1;
    Pair       yyRepValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Base>.

    yyResult = pShiftExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$4 = (GNode)yyResult.semanticValue();

      yyRepetition1 = yyResult.index;
      yyRepValue1   = Pair.EMPTY;
      while (true) {

        yyResult = pRelationalExpression$$Tail1(yyRepetition1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final Action v$5 = (Action)yyResult.semanticValue();

          yyRepetition1 = yyResult.index;
          yyRepValue1   = new Pair(v$5, yyRepValue1);
          continue;
        }
        break;
      }
      { // Start scope for v$6.
        final Pair v$6 = yyRepValue1.reverse();

        yyValue = (GNode)apply(v$6, v$4, yyStart);

        setLocation(yyValue, yyStart);
        return new SemanticValue(yyValue, yyRepetition1, yyError);
      } // End scope for v$6.
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.RelationalExpression$$Tail1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pRelationalExpression$$Tail1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Action     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Recursion>.

    yyResult = pRelationalOperator(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final String v$g$2 = (String)yyResult.semanticValue();

      yyResult = pShiftExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$3 = (GNode)yyResult.semanticValue();

        yyValue = new Action() {
            public Object run(Object v$1) {
              return GNode.create("RelationalExpression", v$1, v$g$2, v$g$3);
            }};
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.RelationalOperator.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pRelationalOperator(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Less>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("<")) {
      yyValue = "<";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Greater>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue(">")) {
      yyValue = ">";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <LessEqual>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("<=")) {
      yyValue = "<=";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <GreaterEqual>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue(">=")) {
      yyValue = ">=";

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("relational operator expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.ShiftExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pShiftExpression(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyRepetition1;
    Pair       yyRepValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Base>.

    yyResult = pAdditiveExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$4 = (GNode)yyResult.semanticValue();

      yyRepetition1 = yyResult.index;
      yyRepValue1   = Pair.EMPTY;
      while (true) {

        yyResult = pShiftExpression$$Tail1(yyRepetition1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final Action v$5 = (Action)yyResult.semanticValue();

          yyRepetition1 = yyResult.index;
          yyRepValue1   = new Pair(v$5, yyRepValue1);
          continue;
        }
        break;
      }
      { // Start scope for v$6.
        final Pair v$6 = yyRepValue1.reverse();

        yyValue = (GNode)apply(v$6, v$4, yyStart);

        setLocation(yyValue, yyStart);
        return new SemanticValue(yyValue, yyRepetition1, yyError);
      } // End scope for v$6.
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.ShiftExpression$$Tail1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pShiftExpression$$Tail1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Action     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Recursion>.

    yyResult = pShiftOperator(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final String v$g$2 = (String)yyResult.semanticValue();

      yyResult = pAdditiveExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$3 = (GNode)yyResult.semanticValue();

        yyValue = new Action() {
            public Object run(Object v$1) {
              return GNode.create("ShiftExpression", v$1, v$g$2, v$g$3);
            }};
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.ShiftOperator.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pShiftOperator(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Left>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("<<")) {
      yyValue = "<<";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Right>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue(">>")) {
      yyValue = ">>";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <UnsignedRight>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue(">>>")) {
      yyValue = ">>>";

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("shift operator expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.AdditiveExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pAdditiveExpression(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyRepetition1;
    Pair       yyRepValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Base>.

    yyResult = pMultiplicativeExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$4 = (GNode)yyResult.semanticValue();

      yyRepetition1 = yyResult.index;
      yyRepValue1   = Pair.EMPTY;
      while (true) {

        yyResult = pAdditiveExpression$$Tail1(yyRepetition1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final Action v$5 = (Action)yyResult.semanticValue();

          yyRepetition1 = yyResult.index;
          yyRepValue1   = new Pair(v$5, yyRepValue1);
          continue;
        }
        break;
      }
      { // Start scope for v$6.
        final Pair v$6 = yyRepValue1.reverse();

        yyValue = (GNode)apply(v$6, v$4, yyStart);

        setLocation(yyValue, yyStart);
        return new SemanticValue(yyValue, yyRepetition1, yyError);
      } // End scope for v$6.
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.AdditiveExpression$$Tail1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pAdditiveExpression$$Tail1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Action     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Recursion>.

    yyResult = pAdditiveOperator(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final String v$g$2 = (String)yyResult.semanticValue();

      yyResult = pMultiplicativeExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$3 = (GNode)yyResult.semanticValue();

        yyValue = new Action() {
            public Object run(Object v$1) {
              return GNode.create("AdditiveExpression", v$1, v$g$2, v$g$3);
            }};
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.AdditiveOperator.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pAdditiveOperator(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Plus>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("+")) {
      yyValue = "+";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Minus>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("-")) {
      yyValue = "-";

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("additive operator expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.MultiplicativeExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pMultiplicativeExpression(final int yyStart) 
    throws IOException {

    Result     yyResult;
    int        yyRepetition1;
    Pair       yyRepValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Base>.

    yyResult = pUnaryExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$4 = (GNode)yyResult.semanticValue();

      yyRepetition1 = yyResult.index;
      yyRepValue1   = Pair.EMPTY;
      while (true) {

        yyResult = pMultiplicativeExpression$$Tail1(yyRepetition1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final Action v$5 = (Action)yyResult.semanticValue();

          yyRepetition1 = yyResult.index;
          yyRepValue1   = new Pair(v$5, yyRepValue1);
          continue;
        }
        break;
      }
      { // Start scope for v$6.
        final Pair v$6 = yyRepValue1.reverse();

        yyValue = (GNode)apply(v$6, v$4, yyStart);

        setLocation(yyValue, yyStart);
        return new SemanticValue(yyValue, yyRepetition1, yyError);
      } // End scope for v$6.
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.MultiplicativeExpression$$Tail1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pMultiplicativeExpression$$Tail1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Action     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Times>.

    yyResult = pMultiplicativeOperator(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final String v$g$2 = (String)yyResult.semanticValue();

      yyResult = pUnaryExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$3 = (GNode)yyResult.semanticValue();

        yyValue = new Action() {
            public Object run(Object v$1) {
              return GNode.create("MultiplicativeExpression", v$1, v$g$2, v$g$3);
            }};
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.MultiplicativeOperator.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pMultiplicativeOperator(final int yyStart) 
    throws IOException {

    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Times>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("*")) {
      yyValue = "*";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Over>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("/")) {
      yyValue = "/";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Modulo>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("%")) {
      yyValue = "%";

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("multiplicative operator expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.UnaryExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pUnaryExpression(final int yyStart) throws IOException {
    Result     yyResult;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Plus>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("+")) {
      final String v$g$1 = "+";

      yyResult = pUnaryExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$2 = (GNode)yyResult.semanticValue();

        yyValue = GNode.create("UnaryExpression", v$g$1, v$g$2);

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative <Minus>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("-")) {
      final String v$g$3 = "-";

      yyResult = pUnaryExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$4 = (GNode)yyResult.semanticValue();

        yyValue = GNode.create("UnaryExpression", v$g$3, v$g$4);

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative <Increment>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("++")) {
      final String v$g$5 = "++";

      yyResult = pUnaryExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$6 = (GNode)yyResult.semanticValue();

        yyValue = GNode.create("UnaryExpression", v$g$5, v$g$6);

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative <Decrement>.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("--")) {
      final String v$g$7 = "--";

      yyResult = pUnaryExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$8 = (GNode)yyResult.semanticValue();

        yyValue = GNode.create("UnaryExpression", v$g$7, v$g$8);

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative <Base>.

    yyResult = pUnaryExpressionNotPlusMinus(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("unary expression expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.UnaryExpressionNotPlusMinus.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pUnaryExpressionNotPlusMinus(final int yyStart) 
    throws IOException {

    Result     yyResult;
    int        yyBase;
    int        yyOption1;
    GNode      yyOpValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("~")) {

      yyResult = pUnaryExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyValue = GNode.create("BitwiseNegationExpression", v$g$1);

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("!")) {

      yyResult = pUnaryExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyValue = GNode.create("LogicalNegationExpression", v$g$1);

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 3.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("(")) {

      final int yyChoice1 = yyResult.index;

      // Nested alternative 1.

      yyResult = pBasicType(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final String v$g$1 = (String)yyResult.semanticValue();

        yyOption1  = yyResult.index;
        yyOpValue1 = null;

        yyResult = pDimensions(yyOption1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final GNode v$el$1 = (GNode)yyResult.semanticValue();

          yyOption1  = yyResult.index;
          yyOpValue1 = v$el$1;
        }
        { // Start scope for v$g$2.
          final GNode v$g$2 = yyOpValue1;

          yyBase   = yyOption1;
          yyResult = pSymbol(yyBase);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue(")")) {

            yyResult = pUnaryExpression(yyResult.index);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              final GNode v$g$3 = (GNode)yyResult.semanticValue();

              yyValue = GNode.create("BasicCastExpression", v$g$1, v$g$2, v$g$3);

              setLocation(yyValue, yyStart);
              return yyResult.createValue(yyValue, yyError);
            }
          } else {
            yyError = yyError.select("\")\" expected", yyBase);
          }
        } // End scope for v$g$2.
      }

      // Nested alternative 2.

      yyResult = pType(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyBase   = yyResult.index;
        yyResult = pSymbol(yyBase);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue(")")) {

          yyResult = pUnaryExpressionNotPlusMinus(yyResult.index);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            final GNode v$g$2 = (GNode)yyResult.semanticValue();

            yyValue = GNode.create("CastExpression", v$g$1, v$g$2);

            setLocation(yyValue, yyStart);
            return yyResult.createValue(yyValue, yyError);
          }
        } else {
          yyError = yyError.select("\")\" expected", yyBase);
        }
      }
    }

    // Alternative <Base>.

    yyResult = pPostfixExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("unary expression not plus minus expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.PostfixExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pPostfixExpression(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyRepetition1;
    boolean    yyRepeated1;
    Pair       yyRepValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <PostFix>.

    yyResult = pPrimaryExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$g$1 = (GNode)yyResult.semanticValue();

      yyRepetition1 = yyResult.index;
      yyRepeated1   = false;
      yyRepValue1   = Pair.EMPTY;
      while (true) {

        yyResult = pPostfixExpressionTail(yyRepetition1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final GNode v$el$1 = (GNode)yyResult.semanticValue();

          yyRepetition1 = yyResult.index;
          yyRepeated1   = true;
          yyRepValue1   = new Pair(v$el$1, yyRepValue1);
          continue;
        }
        break;
      }

      if (yyRepeated1) {
        final Pair v$g$2 = yyRepValue1.reverse();

        yyValue = GNode.create("PostfixExpression", v$g$1, (Pair)v$g$2);

        setLocation(yyValue, yyStart);
        return new SemanticValue(yyValue, yyRepetition1, yyError);
      }
    }

    // Alternative <Base>.

    yyResult = pPrimaryExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.PostfixExpressionTail.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pPostfixExpressionTail(final int yyStart) 
    throws IOException {

    Result     yyResult;
    int        yyBase;
    int        yyOption1;
    GNode      yyOpValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("[")) {

      yyOption1  = yyResult.index;
      yyOpValue1 = null;

      yyResult = pExpression(yyOption1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$el$1 = (GNode)yyResult.semanticValue();

        yyOption1  = yyResult.index;
        yyOpValue1 = v$el$1;
      }
      { // Start scope for v$g$1.
        final GNode v$g$1 = yyOpValue1;

        yyBase   = yyOption1;
        yyResult = pSymbol(yyBase);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue("]")) {

          yyValue = GNode.create("SubscriptTail", v$g$1);

          setLocation(yyValue, yyStart);
          return yyResult.createValue(yyValue, yyError);
        } else {
          yyError = yyError.select("\"]\" expected", yyBase);
        }
      } // End scope for v$g$1.
    }

    // Alternative <Arguments>.

    yyResult = pArguments(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 3.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue(".")) {

      final int yyChoice1 = yyResult.index;

      // Nested alternative 1.

      yyResult = pPrimaryExpression(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyValue = GNode.create("SelectionTail", v$g$1);

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      }

      // Nested alternative 2.

      yyBase   = yyChoice1;
      yyResult = pWord(yyBase);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue("class")) {

        yyValue = GNode.create("ClassSelectionTail", false);

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      } else {
        yyError = yyError.select("\"class\" expected", yyBase);
      }
    }

    // Alternative 4.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("++")) {

      yyValue = GNode.create("PostincrementTail", false);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 5.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("--")) {

      yyValue = GNode.create("PostdecrementTail", false);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("postfix expression tail expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.PrimaryExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pPrimaryExpression(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    int        yyOption1;
    GNode      yyOpValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Literal>.

    yyResult = pLiteral(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 2.

    yyResult = pIdentifier(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final String v$g$1 = (String)yyResult.semanticValue();

      yyValue = GNode.create("PrimaryIdentifier", v$g$1);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 3.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("(")) {

      yyResult = pExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        yyValue = (GNode)yyResult.semanticValue();

        yyBase   = yyResult.index;
        yyResult = pSymbol(yyBase);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue(")")) {

          setLocation(yyValue, yyStart);
          return yyResult.createValue(yyValue, yyError);
        } else {
          yyError = yyError.select("\")\" expected", yyBase);
        }
      }
    }

    // Alternative 4.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("this")) {

      yyValue = GNode.create("ThisExpression", false);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 5.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("super")) {

      yyValue = GNode.create("SuperExpression", false);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 6.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("new")) {

      final int yyChoice1 = yyResult.index;

      // Nested alternative 1.

      yyResult = pQualifiedIdentifier(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyResult = pArguments(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final GNode v$g$2 = (GNode)yyResult.semanticValue();

          yyOption1  = yyResult.index;
          yyOpValue1 = null;

          yyResult = pClassBody(yyOption1);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            final GNode v$el$1 = (GNode)yyResult.semanticValue();

            yyOption1  = yyResult.index;
            yyOpValue1 = v$el$1;
          }
          { // Start scope for v$g$3.
            final GNode v$g$3 = yyOpValue1;

            yyValue = GNode.create("NewExpression", v$g$1, v$g$2, v$g$3);

            setLocation(yyValue, yyStart);
            return new SemanticValue(yyValue, yyOption1, yyError);
          } // End scope for v$g$3.
        }
      }

      // Nested alternative 2.

      yyResult = pTypeName(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$4 = (GNode)yyResult.semanticValue();

        final int yyChoice2 = yyResult.index;

        // Nested alternative 1.

        yyResult = pConcreteDimensions(yyChoice2);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final GNode v$g$5 = (GNode)yyResult.semanticValue();

          yyOption1  = yyResult.index;
          yyOpValue1 = null;

          yyResult = pDimensions(yyOption1);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            final GNode v$el$2 = (GNode)yyResult.semanticValue();

            yyOption1  = yyResult.index;
            yyOpValue1 = v$el$2;
          }
          { // Start scope for v$g$6.
            final GNode v$g$6 = yyOpValue1;

            yyValue = GNode.create("NewExpression", v$g$4, v$g$5, v$g$6);

            setLocation(yyValue, yyStart);
            return new SemanticValue(yyValue, yyOption1, yyError);
          } // End scope for v$g$6.
        }

        // Nested alternative 2.

        yyOption1  = yyChoice2;
        yyOpValue1 = null;

        yyResult = pDimensions(yyOption1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final GNode v$el$3 = (GNode)yyResult.semanticValue();

          yyOption1  = yyResult.index;
          yyOpValue1 = v$el$3;
        }
        { // Start scope for v$g$7.
          final GNode v$g$7 = yyOpValue1;

          yyResult = pArrayInitializer(yyOption1);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            final GNode v$g$8 = (GNode)yyResult.semanticValue();

            yyValue = GNode.create("NewExpression", v$g$4, v$g$7, v$g$8);

            setLocation(yyValue, yyStart);
            return yyResult.createValue(yyValue, yyError);
          }
        } // End scope for v$g$7.
      }
    }

    // Alternative 7.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("void")) {

      yyBase   = yyResult.index;
      yyResult = pSymbol(yyBase);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue(".")) {

        yyBase   = yyResult.index;
        yyResult = pWord(yyBase);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue("class")) {

          yyValue = GNode.create("VoidClassExpression", false);

          setLocation(yyValue, yyStart);
          return yyResult.createValue(yyValue, yyError);
        } else {
          yyError = yyError.select("\"class\" expected", yyBase);
        }
      } else {
        yyError = yyError.select("\".\" expected", yyBase);
      }
    }

    // Done.
    yyError = yyError.select("primary expression expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.ConcreteDimensions.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pConcreteDimensions(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyRepetition1;
    boolean    yyRepeated1;
    Pair       yyRepValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyRepetition1 = yyStart;
    yyRepeated1   = false;
    yyRepValue1   = Pair.EMPTY;
    while (true) {

      yyResult = pConcreteDimension(yyRepetition1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$el$1 = (GNode)yyResult.semanticValue();

        yyRepetition1 = yyResult.index;
        yyRepeated1   = true;
        yyRepValue1   = new Pair(v$el$1, yyRepValue1);
        continue;
      }
      break;
    }

    if (yyRepeated1) {
      final Pair v$g$1 = yyRepValue1.reverse();

      yyValue = GNode.create("ConcreteDimensions", (Pair)v$g$1);

      setLocation(yyValue, yyStart);
      return new SemanticValue(yyValue, yyRepetition1, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.ConcreteDimension.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pConcreteDimension(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("[")) {

      yyResult = pExpression(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        yyValue = (GNode)yyResult.semanticValue();

        yyBase   = yyResult.index;
        yyResult = pSymbol(yyBase);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue("]")) {

          setLocation(yyValue, yyStart);
          return yyResult.createValue(yyValue, yyError);
        } else {
          yyError = yyError.select("\"]\" expected", yyBase);
        }
      }
    }

    // Done.
    yyError = yyError.select("concrete dimension expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.xform.samples.javaproperty.JavaProperty.Arguments.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pArguments(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    int        yyRepetition1;
    Pair       yyRepValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("(")) {

      final int yyChoice1 = yyResult.index;

      // Nested alternative 1.

      yyResult = pExpression(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyRepetition1 = yyResult.index;
        yyRepValue1   = Pair.EMPTY;
        while (true) {

          yyBase   = yyRepetition1;
          yyResult = pSymbol(yyBase);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue(",")) {

            yyResult = pExpression(yyResult.index);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              final GNode v$el$1 = (GNode)yyResult.semanticValue();

              yyRepetition1 = yyResult.index;
              yyRepValue1   = new Pair(v$el$1, yyRepValue1);
              continue;
            }
          } else {
            yyError = yyError.select("\",\" expected", yyBase);
          }
          break;
        }
        { // Start scope for v$g$2.
          final Pair v$g$2 = yyRepValue1.reverse();

          yyBase   = yyRepetition1;
          yyResult = pSymbol(yyBase);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue(")")) {

            yyValue = GNode.create("Arguments", v$g$1, (Pair)v$g$2);

            setLocation(yyValue, yyStart);
            return yyResult.createValue(yyValue, yyError);
          } else {
            yyError = yyError.select("\")\" expected", yyBase);
          }
        } // End scope for v$g$2.
      }

      // Nested alternative 2.

      yyBase   = yyChoice1;
      yyResult = pSymbol(yyBase);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue(")")) {

        yyValue = GNode.create("Arguments", false);

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      } else {
        yyError = yyError.select("\")\" expected", yyBase);
      }
    }

    // Done.
    yyError = yyError.select("arguments expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.ArrayInitializer.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pArrayInitializer(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    int        yyRepetition1;
    Pair       yyRepValue1;
    int        yyOption1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("{")) {

      final int yyChoice1 = yyResult.index;

      // Nested alternative 1.

      yyResult = pVariableInitializer(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$g$1 = (GNode)yyResult.semanticValue();

        yyRepetition1 = yyResult.index;
        yyRepValue1   = Pair.EMPTY;
        while (true) {

          yyBase   = yyRepetition1;
          yyResult = pSymbol(yyBase);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue(",")) {

            yyResult = pVariableInitializer(yyResult.index);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              final GNode v$el$1 = (GNode)yyResult.semanticValue();

              yyRepetition1 = yyResult.index;
              yyRepValue1   = new Pair(v$el$1, yyRepValue1);
              continue;
            }
          } else {
            yyError = yyError.select("\",\" expected", yyBase);
          }
          break;
        }
        { // Start scope for v$g$2.
          final Pair v$g$2 = yyRepValue1.reverse();

          yyOption1  = yyRepetition1;

          yyBase   = yyOption1;
          yyResult = pSymbol(yyBase);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue(",")) {

            yyOption1  = yyResult.index;
          } else {
            yyError = yyError.select("\",\" expected", yyBase);
          }

          yyBase   = yyOption1;
          yyResult = pSymbol(yyBase);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue("}")) {

            yyValue = GNode.create("ArrayInitializer", v$g$1, (Pair)v$g$2);

            setLocation(yyValue, yyStart);
            return yyResult.createValue(yyValue, yyError);
          } else {
            yyError = yyError.select("\"}\" expected", yyBase);
          }
        } // End scope for v$g$2.
      }

      // Nested alternative 2.

      yyBase   = yyChoice1;
      yyResult = pSymbol(yyBase);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue("}")) {

        yyValue = GNode.create("ArrayInitializer", false);

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      } else {
        yyError = yyError.select("\"}\" expected", yyBase);
      }
    }

    // Done.
    yyError = yyError.select("array initializer expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.VariableInitializer.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pVariableInitializer(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fVariableInitializer) 
      yyColumn.chunk2.fVariableInitializer = pVariableInitializer$1(yyStart);
    return yyColumn.chunk2.fVariableInitializer;
  }

  /** Actually parse xtc.xform.samples.javaproperty.JavaProperty.VariableInitializer. */
  private Result pVariableInitializer$1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Array>.

    yyResult = pArrayInitializer(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Expression>.

    yyResult = pExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaType.ResultType.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pResultType(final int yyStart) throws IOException {
    Result     yyResult;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Void>.

    yyResult = pVoidTypeSpecifier(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Regular>.

    yyResult = pType(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaType.VoidTypeSpecifier.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pVoidTypeSpecifier(final int yyStart) throws IOException {
    Result     yyResult;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Void>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("void")) {

      yyValue = GNode.create("VoidTypeSpecifier", false);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("void type specifier expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaType.Type.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pType(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fType) 
      yyColumn.chunk2.fType = pType$1(yyStart);
    return yyColumn.chunk2.fType;
  }

  /** Actually parse xtc.lang.JavaType.Type. */
  private Result pType$1(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyOption1;
    GNode      yyOpValue1;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Type>.

    yyResult = pTypeName(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final GNode v$g$1 = (GNode)yyResult.semanticValue();

      yyOption1  = yyResult.index;
      yyOpValue1 = null;

      yyResult = pDimensions(yyOption1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final GNode v$el$1 = (GNode)yyResult.semanticValue();

        yyOption1  = yyResult.index;
        yyOpValue1 = v$el$1;
      }
      { // Start scope for v$g$2.
        final GNode v$g$2 = yyOpValue1;

        yyValue = GNode.create("Type", v$g$1, v$g$2);

        setLocation(yyValue, yyStart);
        return new SemanticValue(yyValue, yyOption1, yyError);
      } // End scope for v$g$2.
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaType.TypeName.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pTypeName(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fTypeName) 
      yyColumn.chunk2.fTypeName = pTypeName$1(yyStart);
    return yyColumn.chunk2.fTypeName;
  }

  /** Actually parse xtc.lang.JavaType.TypeName. */
  private Result pTypeName$1(final int yyStart) throws IOException {
    Result     yyResult;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Basic>.

    yyResult = pBasicType(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final String v$g$1 = (String)yyResult.semanticValue();

      yyValue = GNode.create("TypeName", v$g$1);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Qualified>.

    yyResult = pQualifiedIdentifier(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaType.BasicType.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pBasicType(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fBasicType) 
      yyColumn.chunk2.fBasicType = pBasicType$1(yyStart);
    return yyColumn.chunk2.fBasicType;
  }

  /** Actually parse xtc.lang.JavaType.BasicType. */
  private Result pBasicType$1(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Byte>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("byte")) {
      yyValue = "byte";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Short>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("short")) {
      yyValue = "short";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Char>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("char")) {
      yyValue = "char";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Int>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("int")) {
      yyValue = "int";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Long>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("long")) {
      yyValue = "long";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Float>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("float")) {
      yyValue = "float";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Double>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("double")) {
      yyValue = "double";

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Boolean>.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("boolean")) {
      yyValue = "boolean";

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("basic type expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaType.Dimensions.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pDimensions(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fDimensions) 
      yyColumn.chunk2.fDimensions = pDimensions$1(yyStart);
    return yyColumn.chunk2.fDimensions;
  }

  /** Actually parse xtc.lang.JavaType.Dimensions. */
  private Result pDimensions$1(final int yyStart) throws IOException {
    Result     yyResult;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pDimensions$$Plus1(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final Pair v$g$1 = (Pair)yyResult.semanticValue();

      yyValue = GNode.create("Dimensions", (Pair)v$g$1);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.Dimensions$$Plus1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pDimensions$$Plus1(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fDimensions$$Plus1) 
      yyColumn.chunk2.fDimensions$$Plus1 = pDimensions$$Plus1$1(yyStart);
    return yyColumn.chunk2.fDimensions$$Plus1;
  }

  /** Actually parse xtc.xform.samples.javaproperty.JavaProperty.Dimensions$$Plus1. */
  private Result pDimensions$$Plus1$1(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyBase;
    Pair       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("[")) {
      final String v$el$1 = "[";

      yyBase   = yyResult.index;
      yyResult = pSymbol(yyBase);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue("]")) {

        final int yyChoice1 = yyResult.index;

        // Nested alternative 1.

        yyResult = pDimensions$$Plus1(yyChoice1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final Pair v$2 = (Pair)yyResult.semanticValue();

          yyValue = new Pair(v$el$1, v$2);

          return yyResult.createValue(yyValue, yyError);
        }

        // Nested alternative 2.

        yyValue = new Pair(v$el$1);

        return new SemanticValue(yyValue, yyChoice1, yyError);
      } else {
        yyError = yyError.select("\"]\" expected", yyBase);
      }
    }

    // Done.
    yyError = yyError.select("dimensions expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaConstant.Literal.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pLiteral(final int yyStart) throws IOException {
    Result     yyResult;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pFloatingPointLiteral(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyResult = pIntegerLiteral(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 3.

    yyResult = pCharacterLiteral(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 4.

    yyResult = pStringLiteral(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (GNode)yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 5.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("true")) {
      final String v$g$1 = "true";

      yyValue = GNode.create("BooleanLiteral", v$g$1);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 6.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("false")) {
      final String v$g$2 = "false";

      yyValue = GNode.create("BooleanLiteral", v$g$2);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 7.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue("null")) {

      yyValue = GNode.create("NullLiteral", false);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    yyError = yyError.select("literal expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaConstant.IntegerLiteral.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pIntegerLiteral(final int yyStart) throws IOException {
    Result     yyResult;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative <Hex>.

    yyResult = pHexLiteral(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final String v$g$1 = (String)yyResult.semanticValue();

      yyValue = GNode.create("IntegerLiteral", v$g$1);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Octal>.

    yyResult = pOctalLiteral(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final String v$g$2 = (String)yyResult.semanticValue();

      yyValue = GNode.create("IntegerLiteral", v$g$2);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative <Decimal>.

    yyResult = pDecimalLiteral(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final String v$g$3 = (String)yyResult.semanticValue();

      yyValue = GNode.create("IntegerLiteral", v$g$3);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaConstant.HexLiteral.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pHexLiteral(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyOption1;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pHexNumeral(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {

      yyOption1  = yyResult.index;

      yyC = character(yyOption1);
      if (-1 != yyC) {
        yyIndex = yyOption1 + 1;

        switch (yyC) {
        case 'L':
        case 'l':
          {
            yyOption1  = yyIndex;
          }

        default:
          /* No match. */
        }
      }

      yyValue = difference(yyStart, yyOption1);

      return new SemanticValue(yyValue, yyOption1, yyError);
    }

    // Done.
    yyError = yyError.select("hex literal expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaConstant.OctalLiteral.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pOctalLiteral(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyOption1;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pOctalNumeral(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {

      yyOption1  = yyResult.index;

      yyC = character(yyOption1);
      if (-1 != yyC) {
        yyIndex = yyOption1 + 1;

        switch (yyC) {
        case 'L':
        case 'l':
          {
            yyOption1  = yyIndex;
          }

        default:
          /* No match. */
        }
      }

      yyValue = difference(yyStart, yyOption1);

      return new SemanticValue(yyValue, yyOption1, yyError);
    }

    // Done.
    yyError = yyError.select("octal literal expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaConstant.DecimalLiteral.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pDecimalLiteral(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyOption1;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pDecimalNumeral(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {

      yyOption1  = yyResult.index;

      yyC = character(yyOption1);
      if (-1 != yyC) {
        yyIndex = yyOption1 + 1;

        switch (yyC) {
        case 'L':
        case 'l':
          {
            yyOption1  = yyIndex;
          }

        default:
          /* No match. */
        }
      }

      yyValue = difference(yyStart, yyOption1);

      return new SemanticValue(yyValue, yyOption1, yyError);
    }

    // Done.
    yyError = yyError.select("decimal literal expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaConstant.DecimalNumeral.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pDecimalNumeral(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    int        yyRepetition1;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '0':
        {
          yyValue = null;

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        {
          yyRepetition1 = yyIndex;
          while (true) {

            yyC = character(yyRepetition1);
            if (-1 != yyC) {
              yyIndex = yyRepetition1 + 1;

              switch (yyC) {
              case '0':
              case '1':
              case '2':
              case '3':
              case '4':
              case '5':
              case '6':
              case '7':
              case '8':
              case '9':
                {
                  yyRepetition1 = yyIndex;
                  continue;
                }

              default:
                /* No match. */
              }
            }
            break;
          }

          yyValue = null;

          return new SemanticValue(yyValue, yyRepetition1, yyError);
        }

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("decimal numeral expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaConstant.HexNumeral.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pHexNumeral(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    int        yyRepetition1;
    boolean    yyRepeated1;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('0' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if (-1 != yyC) {
        yyIndex = yyIndex + 1;

        switch (yyC) {
        case 'X':
        case 'x':
          {
            yyRepetition1 = yyIndex;
            yyRepeated1   = false;
            while (true) {

              yyC = character(yyRepetition1);
              if (-1 != yyC) {
                yyIndex = yyRepetition1 + 1;

                switch (yyC) {
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                case 'E':
                case 'F':
                case 'a':
                case 'b':
                case 'c':
                case 'd':
                case 'e':
                case 'f':
                  {
                    yyRepetition1 = yyIndex;
                    yyRepeated1   = true;
                    continue;
                  }

                default:
                  /* No match. */
                }
              }
              break;
            }

            if (yyRepeated1) {

              yyValue = null;

              return new SemanticValue(yyValue, yyRepetition1, yyError);
            }
          }
          break;

        default:
          /* No match. */
        }
      }
    }

    // Done.
    yyError = yyError.select("hex numeral expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaConstant.OctalNumeral.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pOctalNumeral(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    int        yyRepetition1;
    boolean    yyRepeated1;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('0' == yyC) {
      yyIndex = yyStart + 1;

      yyRepetition1 = yyIndex;
      yyRepeated1   = false;
      while (true) {

        yyC = character(yyRepetition1);
        if (-1 != yyC) {
          yyIndex = yyRepetition1 + 1;

          switch (yyC) {
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
            {
              yyRepetition1 = yyIndex;
              yyRepeated1   = true;
              continue;
            }

          default:
            /* No match. */
          }
        }
        break;
      }

      if (yyRepeated1) {

        yyValue = null;

        return new SemanticValue(yyValue, yyRepetition1, yyError);
      }
    }

    // Done.
    yyError = yyError.select("octal numeral expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaConstant.FloatingPointLiteral.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pFloatingPointLiteral(final int yyStart) throws IOException {
    Result     yyResult;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pFloatingPointString(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final String v$g$1 = (String)yyResult.semanticValue();

      yyValue = GNode.create("FloatingPointLiteral", v$g$1);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaConstant.FloatingPointString.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pFloatingPointString(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyRepetition1;
    boolean    yyRepeated1;
    int        yyOption1;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyRepetition1 = yyStart;
    yyRepeated1   = false;
    while (true) {

      yyC = character(yyRepetition1);
      if (-1 != yyC) {
        yyIndex = yyRepetition1 + 1;

        switch (yyC) {
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          {
            yyRepetition1 = yyIndex;
            yyRepeated1   = true;
            continue;
          }

        default:
          /* No match. */
        }
      }
      break;
    }

    if (yyRepeated1) {

      yyC = character(yyRepetition1);
      if ('.' == yyC) {
        yyIndex = yyRepetition1 + 1;

        yyRepetition1 = yyIndex;
        while (true) {

          yyC = character(yyRepetition1);
          if (-1 != yyC) {
            yyIndex = yyRepetition1 + 1;

            switch (yyC) {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
              {
                yyRepetition1 = yyIndex;
                continue;
              }

            default:
              /* No match. */
            }
          }
          break;
        }

        yyOption1  = yyRepetition1;

        yyResult = pExponent(yyOption1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {

          yyOption1  = yyResult.index;
        }


        yyC = character(yyOption1);
        if (-1 != yyC) {
          yyIndex = yyOption1 + 1;

          switch (yyC) {
          case 'D':
          case 'F':
          case 'd':
          case 'f':
            {
              yyOption1  = yyIndex;
            }

          default:
            /* No match. */
          }
        }

        yyValue = difference(yyStart, yyOption1);

        return new SemanticValue(yyValue, yyOption1, yyError);
      }
    }

    // Alternative 2.

    yyC = character(yyStart);
    if ('.' == yyC) {
      yyIndex = yyStart + 1;

      yyRepetition1 = yyIndex;
      yyRepeated1   = false;
      while (true) {

        yyC = character(yyRepetition1);
        if (-1 != yyC) {
          yyIndex = yyRepetition1 + 1;

          switch (yyC) {
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            {
              yyRepetition1 = yyIndex;
              yyRepeated1   = true;
              continue;
            }

          default:
            /* No match. */
          }
        }
        break;
      }

      if (yyRepeated1) {

        yyOption1  = yyRepetition1;

        yyResult = pExponent(yyOption1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {

          yyOption1  = yyResult.index;
        }


        yyC = character(yyOption1);
        if (-1 != yyC) {
          yyIndex = yyOption1 + 1;

          switch (yyC) {
          case 'D':
          case 'F':
          case 'd':
          case 'f':
            {
              yyOption1  = yyIndex;
            }

          default:
            /* No match. */
          }
        }

        yyValue = difference(yyStart, yyOption1);

        return new SemanticValue(yyValue, yyOption1, yyError);
      }
    }

    // Alternative 3.

    yyRepetition1 = yyStart;
    yyRepeated1   = false;
    while (true) {

      yyC = character(yyRepetition1);
      if (-1 != yyC) {
        yyIndex = yyRepetition1 + 1;

        switch (yyC) {
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          {
            yyRepetition1 = yyIndex;
            yyRepeated1   = true;
            continue;
          }

        default:
          /* No match. */
        }
      }
      break;
    }

    if (yyRepeated1) {

      final int yyChoice1 = yyRepetition1;

      // Nested alternative 1.

      yyResult = pExponent(yyChoice1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        yyOption1  = yyResult.index;

        yyC = character(yyOption1);
        if (-1 != yyC) {
          yyIndex = yyOption1 + 1;

          switch (yyC) {
          case 'D':
          case 'F':
          case 'd':
          case 'f':
            {
              yyOption1  = yyIndex;
            }

          default:
            /* No match. */
          }
        }

        yyValue = difference(yyStart, yyOption1);

        return new SemanticValue(yyValue, yyOption1, yyError);
      }

      // Nested alternative 2.

      yyOption1  = yyChoice1;

      yyResult = pExponent(yyOption1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        yyOption1  = yyResult.index;
      }

      yyC = character(yyOption1);
      if (-1 != yyC) {
        yyIndex = yyOption1 + 1;

        switch (yyC) {
        case 'D':
        case 'F':
        case 'd':
        case 'f':
          {
            yyValue = difference(yyStart, yyIndex);

            return new SemanticValue(yyValue, yyIndex, yyError);
          }

        default:
          /* No match. */
        }
      }
    }

    // Done.
    yyError = yyError.select("floating point string expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaConstant.Exponent.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pExponent(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    int        yyRepetition1;
    boolean    yyRepeated1;
    int        yyOption1;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case 'E':
      case 'e':
        {
          yyOption1  = yyIndex;

          yyC = character(yyOption1);
          if (-1 != yyC) {
            yyIndex = yyOption1 + 1;

            switch (yyC) {
            case '+':
            case '-':
              {
                yyOption1  = yyIndex;
              }

            default:
              /* No match. */
            }
          }

          yyRepetition1 = yyOption1;
          yyRepeated1   = false;
          while (true) {

            yyC = character(yyRepetition1);
            if (-1 != yyC) {
              yyIndex = yyRepetition1 + 1;

              switch (yyC) {
              case '0':
              case '1':
              case '2':
              case '3':
              case '4':
              case '5':
              case '6':
              case '7':
              case '8':
              case '9':
                {
                  yyRepetition1 = yyIndex;
                  yyRepeated1   = true;
                  continue;
                }

              default:
                /* No match. */
              }
            }
            break;
          }

          if (yyRepeated1) {

            yyValue = null;

            return new SemanticValue(yyValue, yyRepetition1, yyError);
          }
        }
        break;

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("exponent expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaConstant.CharacterLiteral.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pCharacterLiteral(final int yyStart) throws IOException {
    Result     yyResult;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pCharacterConstant(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final String v$g$1 = (String)yyResult.semanticValue();

      yyValue = GNode.create("CharacterLiteral", v$g$1);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaConstant.StringLiteral.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pStringLiteral(final int yyStart) throws IOException {
    Result     yyResult;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pStringConstant(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final String v$g$1 = (String)yyResult.semanticValue();

      yyValue = GNode.create("StringLiteral", v$g$1);

      setLocation(yyValue, yyStart);
      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaConstant.CharacterConstant.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pCharacterConstant(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('\'' == yyC) {
      yyIndex = yyStart + 1;

      yyResult = pCharacterConstant$$Choice1(yyIndex);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        yyC = character(yyResult.index);
        if ('\'' == yyC) {
          yyIndex = yyResult.index + 1;

          yyValue = difference(yyStart, yyIndex);

          return new SemanticValue(yyValue, yyIndex, yyError);
        }
      }
    }

    // Done.
    yyError = yyError.select("character constant expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.CharacterConstant$$Choice1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pCharacterConstant$$Choice1(final int yyStart) 
    throws IOException {

    int        yyC;
    int        yyIndex;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '\\':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyC = character(yyChoice1);
          if (-1 != yyC) {
            yyIndex = yyChoice1 + 1;

            switch (yyC) {
            case '\"':
            case '\'':
            case '\\':
            case 'b':
            case 'f':
            case 'n':
            case 'r':
            case 't':
              {
                yyValue = null;

                return new SemanticValue(yyValue, yyIndex, yyError);
              }

            case 'u':
              {
                yyC = character(yyIndex);
                if (-1 != yyC) {
                  yyIndex = yyIndex + 1;

                  switch (yyC) {
                  case '0':
                  case '1':
                  case '2':
                  case '3':
                  case '4':
                  case '5':
                  case '6':
                  case '7':
                  case '8':
                  case '9':
                  case 'A':
                  case 'B':
                  case 'C':
                  case 'D':
                  case 'E':
                  case 'F':
                  case 'a':
                  case 'b':
                  case 'c':
                  case 'd':
                  case 'e':
                  case 'f':
                    {
                      yyC = character(yyIndex);
                      if (-1 != yyC) {
                        yyIndex = yyIndex + 1;

                        switch (yyC) {
                        case '0':
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                        case 'A':
                        case 'B':
                        case 'C':
                        case 'D':
                        case 'E':
                        case 'F':
                        case 'a':
                        case 'b':
                        case 'c':
                        case 'd':
                        case 'e':
                        case 'f':
                          {
                            yyC = character(yyIndex);
                            if (-1 != yyC) {
                              yyIndex = yyIndex + 1;

                              switch (yyC) {
                              case '0':
                              case '1':
                              case '2':
                              case '3':
                              case '4':
                              case '5':
                              case '6':
                              case '7':
                              case '8':
                              case '9':
                              case 'A':
                              case 'B':
                              case 'C':
                              case 'D':
                              case 'E':
                              case 'F':
                              case 'a':
                              case 'b':
                              case 'c':
                              case 'd':
                              case 'e':
                              case 'f':
                                {
                                  yyC = character(yyIndex);
                                  if (-1 != yyC) {
                                    yyIndex = yyIndex + 1;

                                    switch (yyC) {
                                    case '0':
                                    case '1':
                                    case '2':
                                    case '3':
                                    case '4':
                                    case '5':
                                    case '6':
                                    case '7':
                                    case '8':
                                    case '9':
                                    case 'A':
                                    case 'B':
                                    case 'C':
                                    case 'D':
                                    case 'E':
                                    case 'F':
                                    case 'a':
                                    case 'b':
                                    case 'c':
                                    case 'd':
                                    case 'e':
                                    case 'f':
                                      {
                                        yyValue = null;

                                        return new SemanticValue(yyValue, yyIndex, yyError);
                                      }

                                    default:
                                      /* No match. */
                                    }
                                  }
                                }
                                break;

                              default:
                                /* No match. */
                              }
                            }
                          }
                          break;

                        default:
                          /* No match. */
                        }
                      }
                    }
                    break;

                  default:
                    /* No match. */
                  }
                }
              }
              break;

            default:
              /* No match. */
            }
          }

          // Nested alternative 2.

          final int yyChoice2 = yyChoice1;

          // Nested alternative 1.

          yyC = character(yyChoice2);
          if (-1 != yyC) {
            yyIndex = yyChoice2 + 1;

            switch (yyC) {
            case '0':
            case '1':
            case '2':
            case '3':
              {
                yyC = character(yyIndex);
                if (-1 != yyC) {
                  yyIndex = yyIndex + 1;

                  switch (yyC) {
                  case '0':
                  case '1':
                  case '2':
                  case '3':
                  case '4':
                  case '5':
                  case '6':
                  case '7':
                    {
                      yyC = character(yyIndex);
                      if (-1 != yyC) {
                        yyIndex = yyIndex + 1;

                        switch (yyC) {
                        case '0':
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                          {
                            yyValue = null;

                            return new SemanticValue(yyValue, yyIndex, yyError);
                          }

                        default:
                          /* No match. */
                        }
                      }
                    }
                    break;

                  default:
                    /* No match. */
                  }
                }
              }
              break;

            default:
              /* No match. */
            }
          }

          // Nested alternative 2.

          yyC = character(yyChoice2);
          if (-1 != yyC) {
            yyIndex = yyChoice2 + 1;

            switch (yyC) {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
              {
                final int yyChoice3 = yyIndex;

                // Nested alternative 1.

                yyC = character(yyChoice3);
                if (-1 != yyC) {
                  yyIndex = yyChoice3 + 1;

                  switch (yyC) {
                  case '0':
                  case '1':
                  case '2':
                  case '3':
                  case '4':
                  case '5':
                  case '6':
                  case '7':
                    {
                      yyValue = null;

                      return new SemanticValue(yyValue, yyIndex, yyError);
                    }

                  default:
                    /* No match. */
                  }
                }

                // Nested alternative 2.

                yyValue = null;

                return new SemanticValue(yyValue, yyChoice3, yyError);
              }

            default:
              /* No match. */
            }
          }
        }
        break;

      default:
        /* No match. */
      }
    }

    // Alternative 2.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '\'':
      case '\\':
        /* No match. */
        break;

      default:
        {
          yyValue = null;

          return new SemanticValue(yyValue, yyIndex, yyError);
        }
      }
    }

    // Done.
    yyError = yyError.select("character constant expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaConstant.StringConstant.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pStringConstant(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    int        yyRepetition1;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('\"' == yyC) {
      yyIndex = yyStart + 1;

      yyRepetition1 = yyIndex;
      while (true) {

        final int yyChoice1 = yyRepetition1;

        // Nested alternative 1.

        yyC = character(yyChoice1);
        if (-1 != yyC) {
          yyIndex = yyChoice1 + 1;

          switch (yyC) {
          case '\\':
            {
              final int yyChoice2 = yyIndex;

              // Nested alternative 1.

              yyC = character(yyChoice2);
              if (-1 != yyC) {
                yyIndex = yyChoice2 + 1;

                switch (yyC) {
                case '\"':
                case '\'':
                case '\\':
                case 'b':
                case 'f':
                case 'n':
                case 'r':
                case 't':
                  {
                    yyRepetition1 = yyIndex;
                    continue;
                  }

                case 'u':
                  {
                    yyC = character(yyIndex);
                    if (-1 != yyC) {
                      yyIndex = yyIndex + 1;

                      switch (yyC) {
                      case '0':
                      case '1':
                      case '2':
                      case '3':
                      case '4':
                      case '5':
                      case '6':
                      case '7':
                      case '8':
                      case '9':
                      case 'A':
                      case 'B':
                      case 'C':
                      case 'D':
                      case 'E':
                      case 'F':
                      case 'a':
                      case 'b':
                      case 'c':
                      case 'd':
                      case 'e':
                      case 'f':
                        {
                          yyC = character(yyIndex);
                          if (-1 != yyC) {
                            yyIndex = yyIndex + 1;

                            switch (yyC) {
                            case '0':
                            case '1':
                            case '2':
                            case '3':
                            case '4':
                            case '5':
                            case '6':
                            case '7':
                            case '8':
                            case '9':
                            case 'A':
                            case 'B':
                            case 'C':
                            case 'D':
                            case 'E':
                            case 'F':
                            case 'a':
                            case 'b':
                            case 'c':
                            case 'd':
                            case 'e':
                            case 'f':
                              {
                                yyC = character(yyIndex);
                                if (-1 != yyC) {
                                  yyIndex = yyIndex + 1;

                                  switch (yyC) {
                                  case '0':
                                  case '1':
                                  case '2':
                                  case '3':
                                  case '4':
                                  case '5':
                                  case '6':
                                  case '7':
                                  case '8':
                                  case '9':
                                  case 'A':
                                  case 'B':
                                  case 'C':
                                  case 'D':
                                  case 'E':
                                  case 'F':
                                  case 'a':
                                  case 'b':
                                  case 'c':
                                  case 'd':
                                  case 'e':
                                  case 'f':
                                    {
                                      yyC = character(yyIndex);
                                      if (-1 != yyC) {
                                        yyIndex = yyIndex + 1;

                                        switch (yyC) {
                                        case '0':
                                        case '1':
                                        case '2':
                                        case '3':
                                        case '4':
                                        case '5':
                                        case '6':
                                        case '7':
                                        case '8':
                                        case '9':
                                        case 'A':
                                        case 'B':
                                        case 'C':
                                        case 'D':
                                        case 'E':
                                        case 'F':
                                        case 'a':
                                        case 'b':
                                        case 'c':
                                        case 'd':
                                        case 'e':
                                        case 'f':
                                          {
                                            yyRepetition1 = yyIndex;
                                            continue;
                                          }

                                        default:
                                          /* No match. */
                                        }
                                      }
                                    }
                                    break;

                                  default:
                                    /* No match. */
                                  }
                                }
                              }
                              break;

                            default:
                              /* No match. */
                            }
                          }
                        }
                        break;

                      default:
                        /* No match. */
                      }
                    }
                  }
                  break;

                default:
                  /* No match. */
                }
              }

              // Nested alternative 2.

              final int yyChoice3 = yyChoice2;

              // Nested alternative 1.

              yyC = character(yyChoice3);
              if (-1 != yyC) {
                yyIndex = yyChoice3 + 1;

                switch (yyC) {
                case '0':
                case '1':
                case '2':
                case '3':
                  {
                    yyC = character(yyIndex);
                    if (-1 != yyC) {
                      yyIndex = yyIndex + 1;

                      switch (yyC) {
                      case '0':
                      case '1':
                      case '2':
                      case '3':
                      case '4':
                      case '5':
                      case '6':
                      case '7':
                        {
                          yyC = character(yyIndex);
                          if (-1 != yyC) {
                            yyIndex = yyIndex + 1;

                            switch (yyC) {
                            case '0':
                            case '1':
                            case '2':
                            case '3':
                            case '4':
                            case '5':
                            case '6':
                            case '7':
                              {
                                yyRepetition1 = yyIndex;
                                continue;
                              }

                            default:
                              /* No match. */
                            }
                          }
                        }
                        break;

                      default:
                        /* No match. */
                      }
                    }
                  }
                  break;

                default:
                  /* No match. */
                }
              }

              // Nested alternative 2.

              yyC = character(yyChoice3);
              if (-1 != yyC) {
                yyIndex = yyChoice3 + 1;

                switch (yyC) {
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                  {
                    final int yyChoice4 = yyIndex;

                    // Nested alternative 1.

                    yyC = character(yyChoice4);
                    if (-1 != yyC) {
                      yyIndex = yyChoice4 + 1;

                      switch (yyC) {
                      case '0':
                      case '1':
                      case '2':
                      case '3':
                      case '4':
                      case '5':
                      case '6':
                      case '7':
                        {
                          yyRepetition1 = yyIndex;
                          continue;
                        }

                      default:
                        /* No match. */
                      }
                    }

                    // Nested alternative 2.

                    yyRepetition1 = yyChoice4;
                    continue;
                  }

                default:
                  /* No match. */
                }
              }
            }
            break;

          default:
            /* No match. */
          }
        }

        // Nested alternative 2.

        yyC = character(yyChoice1);
        if (-1 != yyC) {
          yyIndex = yyChoice1 + 1;

          switch (yyC) {
          case '\"':
          case '\\':
            /* No match. */
            break;

          default:
            {
              yyRepetition1 = yyIndex;
              continue;
            }
          }
        }
        break;
      }

      yyC = character(yyRepetition1);
      if ('\"' == yyC) {
        yyIndex = yyRepetition1 + 1;

        yyValue = difference(yyStart, yyIndex);

        return new SemanticValue(yyValue, yyIndex, yyError);
      }
    }

    // Done.
    yyError = yyError.select("string constant expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaIdentifier.QualifiedIdentifier.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pQualifiedIdentifier(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fQualifiedIdentifier) 
      yyColumn.chunk2.fQualifiedIdentifier = pQualifiedIdentifier$1(yyStart);
    return yyColumn.chunk2.fQualifiedIdentifier;
  }

  /** Actually parse xtc.lang.JavaIdentifier.QualifiedIdentifier. */
  private Result pQualifiedIdentifier$1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    GNode      yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pIdentifier(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      final String v$g$1 = (String)yyResult.semanticValue();

      yyResult = pQualifiedIdentifier$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final Pair v$g$2 = (Pair)yyResult.semanticValue();

        yyValue = GNode.create("QualifiedIdentifier", v$g$1, (Pair)v$g$2);

        setLocation(yyValue, yyStart);
        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal 
   * xtc.xform.samples.javaproperty.JavaProperty.QualifiedIdentifier$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pQualifiedIdentifier$$Star1(final int yyStart) 
    throws IOException {

    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fQualifiedIdentifier$$Star1) 
      yyColumn.chunk2.fQualifiedIdentifier$$Star1 = pQualifiedIdentifier$$Star1$1(yyStart);
    return yyColumn.chunk2.fQualifiedIdentifier$$Star1;
  }

  /** Actually parse xtc.xform.samples.javaproperty.JavaProperty.QualifiedIdentifier$$Star1. */
  private Result pQualifiedIdentifier$$Star1$1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Pair       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbol(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue(".")) {

      yyResult = pIdentifier(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        final String v$el$1 = (String)yyResult.semanticValue();

        yyResult = pQualifiedIdentifier$$Star1(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          final Pair v$2 = (Pair)yyResult.semanticValue();

          yyValue = new Pair(v$el$1, v$2);

          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Alternative 2.

    yyValue = Pair.EMPTY;

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaIdentifier.Identifier.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pIdentifier(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fIdentifier) 
      yyColumn.chunk3.fIdentifier = pIdentifier$1(yyStart);
    return yyColumn.chunk3.fIdentifier;
  }

  /** Actually parse xtc.lang.JavaIdentifier.Identifier. */
  private Result pIdentifier$1(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pWord(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (String)yyResult.semanticValue();

      if (! JAVA_KEYWORDS.contains(yyValue)) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    yyError = yyError.select("identifier expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaIdentifier.Word.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pWord(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fWord) 
      yyColumn.chunk3.fWord = pWord$1(yyStart);
    return yyColumn.chunk3.fWord;
  }

  /** Actually parse xtc.lang.JavaIdentifier.Word. */
  private Result pWord$1(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pWordCharacters(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (String)yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaIdentifier.WordCharacters.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pWordCharacters(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    int        yyRepetition1;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;
      final char start = (char)yyC;

      if (Character.isJavaIdentifierStart(start)) {

        yyRepetition1 = yyIndex;
        while (true) {

          yyC = character(yyRepetition1);
          if (-1 != yyC) {
            yyIndex = yyRepetition1 + 1;
            final char part = (char)yyC;

            if (Character.isJavaIdentifierPart(part)) {

              yyRepetition1 = yyIndex;
              continue;
            }
          }
          break;
        }

        yyValue = difference(yyStart, yyRepetition1);

        return new SemanticValue(yyValue, yyRepetition1, yyError);
      }
    }

    // Done.
    yyError = yyError.select("word characters expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaSymbol.Symbol.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbol(final int yyStart) throws IOException {
    JavaPropertyParserColumn yyColumn = (JavaPropertyParserColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fSymbol) 
      yyColumn.chunk3.fSymbol = pSymbol$1(yyStart);
    return yyColumn.chunk3.fSymbol;
  }

  /** Actually parse xtc.lang.JavaSymbol.Symbol. */
  private Result pSymbol$1(final int yyStart) throws IOException {
    Result     yyResult;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pSymbolCharacters(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = (String)yyResult.semanticValue();

      yyResult = pSpacing(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.lang.JavaSymbol.SymbolCharacters.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSymbolCharacters(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '>':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyC = character(yyChoice1);
          if (-1 != yyC) {
            yyIndex = yyChoice1 + 1;

            switch (yyC) {
            case '>':
              {
                final int yyChoice2 = yyIndex;

                // Nested alternative 1.

                yyC = character(yyChoice2);
                if (-1 != yyC) {
                  yyIndex = yyChoice2 + 1;

                  switch (yyC) {
                  case '>':
                    {
                      final int yyChoice3 = yyIndex;

                      // Nested alternative 1.

                      yyC = character(yyChoice3);
                      if (-1 != yyC) {
                        yyIndex = yyChoice3 + 1;
                        if ('=' == yyC) {

                          yyValue = ">>>=";

                          return new SemanticValue(yyValue, yyIndex, yyError);
                        }
                      }

                      // Nested alternative 2.

                      yyValue = ">>>";

                      return new SemanticValue(yyValue, yyChoice3, yyError);
                    }

                  case '=':
                    {
                      yyValue = ">>=";

                      return new SemanticValue(yyValue, yyIndex, yyError);
                    }

                  default:
                    /* No match. */
                  }
                }

                // Nested alternative 2.

                yyValue = ">>";

                return new SemanticValue(yyValue, yyChoice2, yyError);
              }

            case '=':
              {
                yyValue = ">=";

                return new SemanticValue(yyValue, yyIndex, yyError);
              }

            default:
              /* No match. */
            }
          }

          // Nested alternative 2.

          yyValue = ">";

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case '<':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyC = character(yyChoice1);
          if (-1 != yyC) {
            yyIndex = yyChoice1 + 1;

            switch (yyC) {
            case '<':
              {
                final int yyChoice2 = yyIndex;

                // Nested alternative 1.

                yyC = character(yyChoice2);
                if (-1 != yyC) {
                  yyIndex = yyChoice2 + 1;
                  if ('=' == yyC) {

                    yyValue = "<<=";

                    return new SemanticValue(yyValue, yyIndex, yyError);
                  }
                }

                // Nested alternative 2.

                yyValue = "<<";

                return new SemanticValue(yyValue, yyChoice2, yyError);
              }

            case '=':
              {
                yyValue = "<=";

                return new SemanticValue(yyValue, yyIndex, yyError);
              }

            default:
              /* No match. */
            }
          }

          // Nested alternative 2.

          yyValue = "<";

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case '+':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyC = character(yyChoice1);
          if (-1 != yyC) {
            yyIndex = yyChoice1 + 1;

            switch (yyC) {
            case '=':
              {
                yyValue = "+=";

                return new SemanticValue(yyValue, yyIndex, yyError);
              }

            case '+':
              {
                yyValue = "++";

                return new SemanticValue(yyValue, yyIndex, yyError);
              }

            default:
              /* No match. */
            }
          }

          // Nested alternative 2.

          yyValue = "+";

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case '-':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyC = character(yyChoice1);
          if (-1 != yyC) {
            yyIndex = yyChoice1 + 1;

            switch (yyC) {
            case '=':
              {
                yyValue = "-=";

                return new SemanticValue(yyValue, yyIndex, yyError);
              }

            case '-':
              {
                yyValue = "--";

                return new SemanticValue(yyValue, yyIndex, yyError);
              }

            default:
              /* No match. */
            }
          }

          // Nested alternative 2.

          yyValue = "-";

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case '*':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyC = character(yyChoice1);
          if (-1 != yyC) {
            yyIndex = yyChoice1 + 1;
            if ('=' == yyC) {

              yyValue = "*=";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }

          // Nested alternative 2.

          yyValue = "*";

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case '/':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyC = character(yyChoice1);
          if (-1 != yyC) {
            yyIndex = yyChoice1 + 1;
            if ('=' == yyC) {

              yyValue = "/=";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }

          // Nested alternative 2.

          yyValue = "/";

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case '%':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyC = character(yyChoice1);
          if (-1 != yyC) {
            yyIndex = yyChoice1 + 1;
            if ('=' == yyC) {

              yyValue = "%=";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }

          // Nested alternative 2.

          yyValue = "%";

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case '&':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyC = character(yyChoice1);
          if (-1 != yyC) {
            yyIndex = yyChoice1 + 1;

            switch (yyC) {
            case '=':
              {
                yyValue = "&=";

                return new SemanticValue(yyValue, yyIndex, yyError);
              }

            case '&':
              {
                yyValue = "&&";

                return new SemanticValue(yyValue, yyIndex, yyError);
              }

            default:
              /* No match. */
            }
          }

          // Nested alternative 2.

          yyValue = "&";

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case '^':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyC = character(yyChoice1);
          if (-1 != yyC) {
            yyIndex = yyChoice1 + 1;
            if ('=' == yyC) {

              yyValue = "^=";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }

          // Nested alternative 2.

          yyValue = "^";

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case '|':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyC = character(yyChoice1);
          if (-1 != yyC) {
            yyIndex = yyChoice1 + 1;

            switch (yyC) {
            case '=':
              {
                yyValue = "|=";

                return new SemanticValue(yyValue, yyIndex, yyError);
              }

            case '|':
              {
                yyValue = "||";

                return new SemanticValue(yyValue, yyIndex, yyError);
              }

            default:
              /* No match. */
            }
          }

          // Nested alternative 2.

          yyValue = "|";

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case '=':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyC = character(yyChoice1);
          if (-1 != yyC) {
            yyIndex = yyChoice1 + 1;
            if ('=' == yyC) {

              yyValue = "==";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }

          // Nested alternative 2.

          yyValue = "=";

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case '!':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyC = character(yyChoice1);
          if (-1 != yyC) {
            yyIndex = yyChoice1 + 1;
            if ('=' == yyC) {

              yyValue = "!=";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }

          // Nested alternative 2.

          yyValue = "!";

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case ';':
        {
          yyValue = ";";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case ':':
        {
          yyValue = ":";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case ',':
        {
          yyValue = ",";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '.':
        {
          yyValue = ".";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '{':
        {
          yyValue = "{";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '}':
        {
          yyValue = "}";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '(':
        {
          yyValue = "(";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case ')':
        {
          yyValue = ")";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '[':
        {
          yyValue = "[";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case ']':
        {
          yyValue = "]";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '~':
        {
          yyValue = "~";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '?':
        {
          yyValue = "?";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("symbol characters expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.util.Spacing.Spacing.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pSpacing(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyPredIndex;
    boolean    yyPredMatched;
    int        yyBase;
    int        yyRepetition1;
    int        yyRepetition2;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyRepetition1 = yyStart;
    while (true) {

      final int yyChoice1 = yyRepetition1;

      // Nested alternative 1.

      yyC = character(yyChoice1);
      if (-1 != yyC) {
        yyIndex = yyChoice1 + 1;

        switch (yyC) {
        case ' ':
          {
            yyRepetition1 = yyIndex;
            continue;
          }

        case '\t':
          {
            yyRepetition1 = yyIndex;
            continue;
          }

        case '\f':
          {
            yyRepetition1 = yyIndex;
            continue;
          }

        case '\r':
          {
            final int yyChoice2 = yyIndex;

            // Nested alternative 1.

            yyC = character(yyChoice2);
            if ('\n' == yyC) {
              yyIndex = yyChoice2 + 1;

              yyRepetition1 = yyIndex;
              continue;
            }

            // Nested alternative 2.

            yyRepetition1 = yyChoice2;
            continue;
          }

        case '\n':
          {
            yyRepetition1 = yyIndex;
            continue;
          }

        case '/':
          {
            yyC = character(yyIndex);
            if (-1 != yyC) {
              yyIndex = yyIndex + 1;

              switch (yyC) {
              case '*':
                {
                  yyRepetition2 = yyIndex;
                  while (true) {

                    final int yyChoice2 = yyRepetition2;

                    // Nested alternative 1.

                    yyC = character(yyChoice2);
                    if (-1 != yyC) {
                      yyIndex = yyChoice2 + 1;

                      switch (yyC) {
                      case '*':
                        {
                          yyPredMatched = false;

                          yyC = character(yyIndex);
                          if ('/' == yyC) {
                            yyPredIndex = yyIndex + 1;

                            yyPredMatched = true;
                          }

                          if (! yyPredMatched) {

                            yyRepetition2 = yyIndex;
                            continue;
                          } else {
                            yyError = yyError.select("spacing expected", yyStart);
                          }
                        }
                        break;

                      default:
                        {
                          yyRepetition2 = yyIndex;
                          continue;
                        }
                      }
                    }
                    break;
                  }

                  yyBase = yyRepetition2;
                  yyC    = character(yyBase);
                  if ('*' == yyC) {
                    yyIndex = yyRepetition2 + 1;

                    yyC = character(yyIndex);
                    if ('/' == yyC) {
                      yyIndex = yyIndex + 1;

                      yyRepetition1 = yyIndex;
                      continue;
                    } else {
                      yyError = yyError.select("\"*/\" expected", yyBase);
                    }
                  } else {
                    yyError = yyError.select("\"*/\" expected", yyBase);
                  }
                }
                break;

              case '/':
                {
                  yyRepetition2 = yyIndex;
                  while (true) {

                    yyC = character(yyRepetition2);
                    if (-1 != yyC) {
                      yyIndex = yyRepetition2 + 1;

                      switch (yyC) {
                      case '\n':
                      case '\r':
                        /* No match. */
                        break;

                      default:
                        {
                          yyRepetition2 = yyIndex;
                          continue;
                        }
                      }
                    }
                    break;
                  }

                  yyResult = pLineTerminator(yyRepetition2);
                  yyError  = yyResult.select(yyError);
                  if (yyResult.hasValue()) {

                    yyRepetition1 = yyResult.index;
                    continue;
                  }
                }
                break;

              default:
                /* No match. */
              }
            }
          }
          break;

        default:
          /* No match. */
        }
      }
      break;
    }

    yyValue = null;

    return new SemanticValue(yyValue, yyRepetition1, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.util.Spacing.LineTerminator.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pLineTerminator(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '\r':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyC = character(yyChoice1);
          if ('\n' == yyC) {
            yyIndex = yyChoice1 + 1;

            yyValue = null;

            return new SemanticValue(yyValue, yyIndex, yyError);
          }

          // Nested alternative 2.

          yyValue = null;

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case '\n':
        {
          yyValue = null;

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("line terminator expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.util.Spacing.EndOfFile.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pEndOfFile(final int yyStart) throws IOException {
    int        yyC;
    int        yyPredIndex;
    boolean    yyPredMatched;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyPredMatched = false;

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyPredIndex = yyStart + 1;

      yyPredMatched = true;
    }

    if (! yyPredMatched) {

      yyValue = null;

      return new SemanticValue(yyValue, yyStart, yyError);
    } else {
      yyError = yyError.select("end of file expected", yyStart);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal xtc.util.Null.Null.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pNull(final int yyStart) throws IOException {
    Object     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyValue = null;

    if (yyValue instanceof Node) {
      setLocation((Node)yyValue, yyStart);
    }
    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  static {
    add(JAVA_KEYWORDS, new Object[] {
      "abstract", "default", "if",         "private",     "this",
      "boolean",  "do",      "implements", "protected",   "throw",
      "break",    "double",  "import",     "public",      "throws",
      "byte",     "else",    "instanceof", "return",      "transient",
      "case",     "extends", "int",        "short",       "try",
      "catch",    "final",   "interface",  "static",      "void",
      "char",     "finally", "long",       "strictfp",    "volatile",
      "class",    "float",   "native",     "super",       "while",
      "const",    "for",     "new",        "switch",
      "continue", "goto",    "package",    "synchronized"
    });
  }
  static{
    add(JAVA_KEYWORDS, new Object[] { "property" });
  }

  // =========================================================================

  /**
   * Add the specified values to the specified set.
   *
   * @param set The set.
   * @param values The new values.
   */
  protected static void add(Set set, Object[] values) {
    for (int i=0; i<values.length; i++) {
      set.add(values[i]);
    }
  }

}
